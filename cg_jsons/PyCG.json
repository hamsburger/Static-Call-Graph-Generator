{"micro-benchmark\\args_test": [], "micro-benchmark\\args_test.ArgsTest.test_assigned_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "base.TestBase.get_snippet_path": [], "base.TestBase.validate_snippet": [], "micro-benchmark\\args_test.ArgsTest.test_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\args_test.ArgsTest.test_imported_assigned_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\args_test.ArgsTest.test_imported_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\args_test.ArgsTest.test_nested_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\args_test.ArgsTest.test_param_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\assignments_test": [], "micro-benchmark\\assignments_test.AssignmentsTest.test_chained": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\assignments_test.AssignmentsTest.test_recursive_tuple": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\assignments_test.AssignmentsTest.test_starred": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\assignments_test.AssignmentsTest.test_tuple": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\base": ["unittest.main", "os.path.dirname", "os.path.abspath"], "os.path.abspath": [], "os.path.dirname": [], "micro-benchmark\\base.TestBase.setUp": ["importlib.import_module", "os.environ.get", "os.path.join", "micro-benchmark\\base.TestBase.setUp.error", "<builtin>.getattr"], "micro-benchmark\\base.TestBase.setUp.error": ["<builtin>.print", "sys.exit"], "<builtin>.print": [], "sys.exit": [], "os.path.join": [], "os.environ.get": [], "importlib.import_module": [], "<builtin>.getattr": [], "micro-benchmark\\base.TestBase.validate_snippet": ["micro-benchmark\\base.TestBase.assertEqual", "micro-benchmark\\base.TestBase.get_snippet_expected_cg", "micro-benchmark\\base.TestBase.get_snippet_output_cg"], "micro-benchmark\\base.TestBase.get_snippet_output_cg": ["os.path.join"], "micro-benchmark\\base.TestBase.get_snippet_expected_cg": ["json.loads", "<builtin>.open", "os.path.join"], "micro-benchmark\\base.TestBase.assertEqual": ["micro-benchmark\\base.TestBase.assertEqual.do_sorted", "<builtin>.super"], "micro-benchmark\\base.TestBase.get_snippet_path": ["os.path.join"], "<builtin>.open": [], "json.loads": [], "micro-benchmark\\base.TestBase.assertEqual.do_sorted": ["<builtin>.sorted"], "<builtin>.sorted": [], "<builtin>.super": [], "unittest.main": [], "micro-benchmark\\builtins_test": [], "micro-benchmark\\builtins_test.BuiltinsTest.test_functions": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\builtins_test.BuiltinsTest.test_map": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\builtins_test.BuiltinsTest.test_types": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test": [], "micro-benchmark\\classes_test.ClassesTest.test_assigned_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_assigned_self_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_base_class_attr": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_base_class_calls_child": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_direct_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_imported_attr_access": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_imported_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_imported_call_without_init": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_imported_nested_attr_access": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_instance": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_nested_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_nested_class_calls": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_parameter_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_return_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_return_call_direct": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_self_assignment": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_self_assign_func": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_self_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_static_method_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_super_class_return": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\classes_test.ClassesTest.test_tuple_assignment": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\create_pytests": ["os.path.relpath", "os.path.join", "os.path.dirname", "os.listdir", "micro-benchmark\\create_pytests.create_test_case"], "os.path.relpath": [], "micro-benchmark\\create_pytests.create_test_case": ["os.listdir.split", "<builtin>.open", "os.path.join", "os.listdir"], "os.listdir.split": [], "os.listdir": [], "micro-benchmark\\decorators_test": [], "micro-benchmark\\decorators_test.DecoratorsTest.test_assigned": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\decorators_test.DecoratorsTest.test_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\decorators_test.DecoratorsTest.test_nested": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\decorators_test.DecoratorsTest.test_nested_decorators": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\decorators_test.DecoratorsTest.test_param_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\decorators_test.DecoratorsTest.test_return": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\decorators_test.DecoratorsTest.test_return_different_func": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test": [], "micro-benchmark\\dicts_test.DictsTest.test_add_key": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_assign": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_ext_key": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_nested": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_new_key_param": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_param": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_param_key": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_return": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_return_assign": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_type_coercion": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dicts_test.DictsTest.test_update": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\direct_calls_test": [], "micro-benchmark\\direct_calls_test.DirectCallsTest.test_assigned_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\direct_calls_test.DirectCallsTest.test_imported_return_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\direct_calls_test.DirectCallsTest.test_return_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\direct_calls_test.DirectCallsTest.test_with_parameters": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\dynamic_test": [], "micro-benchmark\\dynamic_test.DynamicTest.test_eval": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\exceptions_test": [], "micro-benchmark\\exceptions_test.ExceptionsTest.test_raise": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\exceptions_test.ExceptionsTest.test_raise_assigned": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\exceptions_test.ExceptionsTest.test_raise_attr": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\external_test": [], "micro-benchmark\\external_test.ExternalTest.test_attribute": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\external_test.ExternalTest.test_attribute_assigned": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\external_test.ExternalTest.test_cls_parent": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\external_test.ExternalTest.test_function": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\external_test.ExternalTest.test_function_asname": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\external_test.ExternalTest.test_function_assigned": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\functions_test": [], "micro-benchmark\\functions_test.FunctionsTest.test_assigned_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\functions_test.FunctionsTest.test_assigned_call_lit_param": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\functions_test.FunctionsTest.test_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\functions_test.FunctionsTest.test_imported_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\generators_test": [], "micro-benchmark\\generators_test.GeneratorsTest.test_iterable": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\generators_test.GeneratorsTest.test_iterable_assigned": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\generators_test.GeneratorsTest.test_iter_param": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\generators_test.GeneratorsTest.test_iter_return": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\generators_test.GeneratorsTest.test_no_iter": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\generators_test.GeneratorsTest.test_yield": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test": [], "micro-benchmark\\imports_test.ImportsTest.test_chained_import": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_import_all": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_import_as": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_import_from": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_init_func_import": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_init_import": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_parent_import": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_relative_import": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_relative_import_with_name": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_simple_import": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_submodule_import": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_submodule_import_all": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_submodule_import_as": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\imports_test.ImportsTest.test_submodule_import_from": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\kwargs_test": [], "micro-benchmark\\kwargs_test.KwargsTest.test_assigned_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\kwargs_test.KwargsTest.test_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\kwargs_test.KwargsTest.test_chained_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lambdas_test": [], "micro-benchmark\\lambdas_test.LambdasTest.test_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lambdas_test.LambdasTest.test_calls_parameter": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lambdas_test.LambdasTest.test_chained_calls": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lambdas_test.LambdasTest.test_parameter_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lambdas_test.LambdasTest.test_return_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lists_test": [], "micro-benchmark\\lists_test.ListsTest.test_comprehension_if": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lists_test.ListsTest.test_comprehension_val": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lists_test.ListsTest.test_ext_index": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lists_test.ListsTest.test_nested": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lists_test.ListsTest.test_nested_comprehension": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lists_test.ListsTest.test_param_index": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lists_test.ListsTest.test_simple": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\lists_test.ListsTest.test_slice": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\mro_test": [], "micro-benchmark\\mro_test.MroTest.test_basic": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\mro_test.MroTest.test_basic_init": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\mro_test.MroTest.test_parents_same_superclass": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\mro_test.MroTest.test_self_assignment": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\mro_test.MroTest.test_super_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\mro_test.MroTest.test_two_parents": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\mro_test.MroTest.test_two_parents_method_defined": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\returns_test": [], "micro-benchmark\\returns_test.ReturnsTest.test_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\returns_test.ReturnsTest.test_imported_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\returns_test.ReturnsTest.test_nested_import_call": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\returns_test.ReturnsTest.test_return_complex": ["base.TestBase.validate_snippet", "base.TestBase.get_snippet_path"], "micro-benchmark\\snippets\\args\\assigned_call\\main": ["micro-benchmark\\snippets\\args\\assigned_call\\main.func"], "micro-benchmark\\snippets\\args\\assigned_call\\main.param_func": [], "micro-benchmark\\snippets\\args\\assigned_call\\main.func": ["micro-benchmark\\snippets\\args\\assigned_call\\main.param_func"], "micro-benchmark\\snippets\\args\\call\\main": ["micro-benchmark\\snippets\\args\\call\\main.func"], "micro-benchmark\\snippets\\args\\call\\main.param_func": [], "micro-benchmark\\snippets\\args\\call\\main.func": ["micro-benchmark\\snippets\\args\\call\\main.param_func"], "micro-benchmark\\snippets\\args\\imported_assigned_call\\main": ["to_import.func"], "micro-benchmark\\snippets\\args\\imported_assigned_call\\main.param_func": [], "to_import.func": [], "micro-benchmark\\snippets\\args\\imported_assigned_call\\to_import": [], "micro-benchmark\\snippets\\args\\imported_assigned_call\\to_import.func": [], "micro-benchmark\\snippets\\args\\imported_call\\main": ["to_import.func"], "micro-benchmark\\snippets\\args\\imported_call\\main.param_func": [], "micro-benchmark\\snippets\\args\\imported_call\\to_import": [], "micro-benchmark\\snippets\\args\\imported_call\\to_import.func": [], "micro-benchmark\\snippets\\args\\nested_call\\main": ["micro-benchmark\\snippets\\args\\nested_call\\main.func"], "micro-benchmark\\snippets\\args\\nested_call\\main.nested_func": [], "micro-benchmark\\snippets\\args\\nested_call\\main.param_func": ["micro-benchmark\\snippets\\args\\nested_call\\main.nested_func"], "micro-benchmark\\snippets\\args\\nested_call\\main.func": ["micro-benchmark\\snippets\\args\\nested_call\\main.param_func"], "micro-benchmark\\snippets\\args\\param_call\\main": ["micro-benchmark\\snippets\\args\\param_call\\main.func", "micro-benchmark\\snippets\\args\\param_call\\main.func2"], "micro-benchmark\\snippets\\args\\param_call\\main.func": ["micro-benchmark\\snippets\\args\\param_call\\main.func3"], "micro-benchmark\\snippets\\args\\param_call\\main.func3": [], "micro-benchmark\\snippets\\args\\param_call\\main.func2": [], "micro-benchmark\\snippets\\assignments\\chained\\main": ["micro-benchmark\\snippets\\assignments\\chained\\main.func1", "micro-benchmark\\snippets\\assignments\\chained\\main.func2"], "micro-benchmark\\snippets\\assignments\\chained\\main.func1": [], "micro-benchmark\\snippets\\assignments\\chained\\main.func2": [], "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main": ["micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func1", "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func2", "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func3", "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func6", "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func4", "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func5"], "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func1": [], "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func2": [], "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func3": [], "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func4": [], "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func5": [], "micro-benchmark\\snippets\\assignments\\recursive_tuple\\main.func6": [], "micro-benchmark\\snippets\\assignments\\starred\\main": ["micro-benchmark\\snippets\\assignments\\starred\\main.func3", "micro-benchmark\\snippets\\assignments\\starred\\main.func1"], "micro-benchmark\\snippets\\assignments\\starred\\main.func1": [], "micro-benchmark\\snippets\\assignments\\starred\\main.func2": [], "micro-benchmark\\snippets\\assignments\\starred\\main.func3": [], "micro-benchmark\\snippets\\assignments\\starred\\main.func4": [], "micro-benchmark\\snippets\\assignments\\tuple\\main": ["micro-benchmark\\snippets\\assignments\\tuple\\main.func3", "micro-benchmark\\snippets\\assignments\\tuple\\main.func2", "micro-benchmark\\snippets\\assignments\\tuple\\main.func1"], "micro-benchmark\\snippets\\assignments\\tuple\\main.func1": [], "micro-benchmark\\snippets\\assignments\\tuple\\main.func2": [], "micro-benchmark\\snippets\\assignments\\tuple\\main.func3": [], "micro-benchmark\\snippets\\builtins\\functions\\main": ["<builtin>.len"], "<builtin>.len": [], "micro-benchmark\\snippets\\builtins\\map\\main": ["<builtin>.map"], "micro-benchmark\\snippets\\builtins\\map\\main.func": [], "<builtin>.map": [], "micro-benchmark\\snippets\\builtins\\map\\main.func2": ["micro-benchmark\\snippets\\builtins\\map\\main.func"], "micro-benchmark\\snippets\\builtins\\map\\main.func3": [], "micro-benchmark\\snippets\\builtins\\map\\main.func3.func": [], "micro-benchmark\\snippets\\builtins\\types\\main": [], "micro-benchmark\\snippets\\classes\\assigned_call\\main": ["micro-benchmark\\snippets\\classes\\assigned_call\\main.MyClass.func"], "micro-benchmark\\snippets\\classes\\assigned_call\\main.MyClass.func": [], "micro-benchmark\\snippets\\classes\\assigned_self_call\\main": ["micro-benchmark\\snippets\\classes\\assigned_self_call\\main.MyClass.func2"], "micro-benchmark\\snippets\\classes\\assigned_self_call\\main.MyClass.func1": [], "micro-benchmark\\snippets\\classes\\assigned_self_call\\main.MyClass.func2": ["micro-benchmark\\snippets\\classes\\assigned_self_call\\main.MyClass.func1"], "micro-benchmark\\snippets\\classes\\base_class_attr\\main": ["micro-benchmark\\snippets\\classes\\base_class_attr\\main.A.B.bfunc", "micro-benchmark\\snippets\\classes\\base_class_attr\\main.C.cfunc"], "micro-benchmark\\snippets\\classes\\base_class_attr\\main.A.B.bfunc": [], "micro-benchmark\\snippets\\classes\\base_class_attr\\main.C.cfunc": [], "micro-benchmark\\snippets\\classes\\base_class_calls_child\\main": ["micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.C.__init__", "micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.B.__init__", "micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.A.func"], "micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.A.func": ["micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.B.func2", "micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.C.func2"], "micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.C.func2": [], "micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.B.func2": [], "micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.B.__init__": [], "micro-benchmark\\snippets\\classes\\base_class_calls_child\\main.C.__init__": [], "micro-benchmark\\snippets\\classes\\call\\main": ["micro-benchmark\\snippets\\classes\\call\\main.MyClass.func"], "micro-benchmark\\snippets\\classes\\call\\main.MyClass.func": [], "micro-benchmark\\snippets\\classes\\direct_call\\main": ["micro-benchmark\\snippets\\classes\\direct_call\\main.MyClass.func", "micro-benchmark\\snippets\\classes\\direct_call\\main.MyClass.__init__"], "micro-benchmark\\snippets\\classes\\direct_call\\main.MyClass.__init__": [], "micro-benchmark\\snippets\\classes\\direct_call\\main.MyClass.func": [], "micro-benchmark\\snippets\\classes\\imported_attr_access\\main": ["to_import.func"], "micro-benchmark\\snippets\\classes\\imported_attr_access\\to_import": [], "micro-benchmark\\snippets\\classes\\imported_attr_access\\to_import.func": [], "micro-benchmark\\snippets\\classes\\imported_call\\main": ["to_import.MyClass.func", "to_import.MyClass"], "to_import.MyClass": [], "to_import.MyClass.func": [], "micro-benchmark\\snippets\\classes\\imported_call\\to_import": [], "micro-benchmark\\snippets\\classes\\imported_call\\to_import.MyClass.__init__": [], "micro-benchmark\\snippets\\classes\\imported_call\\to_import.MyClass.func": [], "micro-benchmark\\snippets\\classes\\imported_call_without_init\\main": ["to_import.MyClass.func", "to_import.MyClass"], "micro-benchmark\\snippets\\classes\\imported_call_without_init\\to_import": [], "micro-benchmark\\snippets\\classes\\imported_call_without_init\\to_import.MyClass.func": [], "micro-benchmark\\snippets\\classes\\imported_nested_attr_access\\main": ["nest.imported.func"], "nest.imported.func": [], "micro-benchmark\\snippets\\classes\\imported_nested_attr_access\\nest\\imported": [], "micro-benchmark\\snippets\\classes\\imported_nested_attr_access\\nest\\imported.func": [], "micro-benchmark\\snippets\\classes\\instance\\main": ["micro-benchmark\\snippets\\classes\\instance\\main.MyClass.__init__", "micro-benchmark\\snippets\\classes\\instance\\main.MyClass.func"], "micro-benchmark\\snippets\\classes\\instance\\main.MyClass.__init__": [], "micro-benchmark\\snippets\\classes\\instance\\main.MyClass.func": [], "micro-benchmark\\snippets\\classes\\nested_call\\main": ["micro-benchmark\\snippets\\classes\\nested_call\\main.MyClass.func"], "micro-benchmark\\snippets\\classes\\nested_call\\main.MyClass.func": ["micro-benchmark\\snippets\\classes\\nested_call\\main.MyClass.func.nested"], "micro-benchmark\\snippets\\classes\\nested_call\\main.MyClass.func.nested": [], "micro-benchmark\\snippets\\classes\\nested_class_calls\\main": ["micro-benchmark\\snippets\\classes\\nested_class_calls\\main.A.__init__", "micro-benchmark\\snippets\\classes\\nested_class_calls\\main.A.func"], "micro-benchmark\\snippets\\classes\\nested_class_calls\\main.C.func": [], "micro-benchmark\\snippets\\classes\\nested_class_calls\\main.B.__init__": [], "micro-benchmark\\snippets\\classes\\nested_class_calls\\main.B.func": ["micro-benchmark\\snippets\\classes\\nested_class_calls\\main.C.func"], "micro-benchmark\\snippets\\classes\\nested_class_calls\\main.A.__init__": [], "micro-benchmark\\snippets\\classes\\nested_class_calls\\main.A.func": ["micro-benchmark\\snippets\\classes\\nested_class_calls\\main.B.__init__", "micro-benchmark\\snippets\\classes\\nested_class_calls\\main.B.func"], "micro-benchmark\\snippets\\classes\\parameter_call\\main": ["micro-benchmark\\snippets\\classes\\parameter_call\\main.MyClass.func1"], "micro-benchmark\\snippets\\classes\\parameter_call\\main.MyClass.func3": [], "micro-benchmark\\snippets\\classes\\parameter_call\\main.MyClass.func2": ["micro-benchmark\\snippets\\classes\\parameter_call\\main.MyClass.func3"], "micro-benchmark\\snippets\\classes\\parameter_call\\main.MyClass.func1": ["micro-benchmark\\snippets\\classes\\parameter_call\\main.MyClass.func2"], "micro-benchmark\\snippets\\classes\\return_call\\main": ["micro-benchmark\\snippets\\classes\\return_call\\main.MyClass.func2", "micro-benchmark\\snippets\\classes\\return_call\\main.MyClass.func1"], "micro-benchmark\\snippets\\classes\\return_call\\main.MyClass.func2": [], "micro-benchmark\\snippets\\classes\\return_call\\main.MyClass.func1": [], "micro-benchmark\\snippets\\classes\\return_call_direct\\main": ["micro-benchmark\\snippets\\classes\\return_call_direct\\main.MyClass.func1", "micro-benchmark\\snippets\\classes\\return_call_direct\\main.MyClass.func2"], "micro-benchmark\\snippets\\classes\\return_call_direct\\main.MyClass.func2": [], "micro-benchmark\\snippets\\classes\\return_call_direct\\main.MyClass.func1": [], "micro-benchmark\\snippets\\classes\\self_assignment\\main": ["micro-benchmark\\snippets\\classes\\self_assignment\\main.A.__init__", "micro-benchmark\\snippets\\classes\\self_assignment\\main.A.func"], "micro-benchmark\\snippets\\classes\\self_assignment\\main.A.__init__": [], "micro-benchmark\\snippets\\classes\\self_assignment\\main.A.func": ["micro-benchmark\\snippets\\classes\\self_assignment\\main.A.func2"], "micro-benchmark\\snippets\\classes\\self_assignment\\main.A.func2": [], "micro-benchmark\\snippets\\classes\\self_assign_func\\main": ["micro-benchmark\\snippets\\classes\\self_assign_func\\main.B.func", "micro-benchmark\\snippets\\classes\\self_assign_func\\main.B.__init__"], "micro-benchmark\\snippets\\classes\\self_assign_func\\main.A.func": [], "micro-benchmark\\snippets\\classes\\self_assign_func\\main.B.__init__": [], "micro-benchmark\\snippets\\classes\\self_assign_func\\main.B.func": ["micro-benchmark\\snippets\\classes\\self_assign_func\\main.A.func"], "micro-benchmark\\snippets\\classes\\self_call\\main": ["micro-benchmark\\snippets\\classes\\self_call\\main.MyClass.func2", "micro-benchmark\\snippets\\classes\\self_call\\main.MyClass.__init__"], "micro-benchmark\\snippets\\classes\\self_call\\main.MyClass.__init__": ["micro-benchmark\\snippets\\classes\\self_call\\main.MyClass.func1"], "micro-benchmark\\snippets\\classes\\self_call\\main.MyClass.func1": [], "micro-benchmark\\snippets\\classes\\self_call\\main.MyClass.func2": ["micro-benchmark\\snippets\\classes\\self_call\\main.MyClass.func1"], "micro-benchmark\\snippets\\classes\\static_method_call\\main": ["micro-benchmark\\snippets\\classes\\static_method_call\\main.MyClass.func"], "micro-benchmark\\snippets\\classes\\static_method_call\\main.MyClass.func": [], "micro-benchmark\\snippets\\classes\\super_class_return\\main": ["micro-benchmark\\snippets\\classes\\super_class_return\\main.A.func1", "micro-benchmark\\snippets\\classes\\super_class_return\\main.B.func2"], "micro-benchmark\\snippets\\classes\\super_class_return\\main.A.func1": [], "micro-benchmark\\snippets\\classes\\super_class_return\\main.B.func2": [], "micro-benchmark\\snippets\\classes\\tuple_assignment\\main": ["micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass.__init__", "micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass.func2", "micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass.func1", "micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass.func3", "micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass2.__init__"], "micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass.__init__": [], "micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass.func1": [], "micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass.func2": [], "micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass.func3": [], "micro-benchmark\\snippets\\classes\\tuple_assignment\\main.MyClass2.__init__": [], "micro-benchmark\\snippets\\decorators\\assigned\\main": ["micro-benchmark\\snippets\\decorators\\assigned\\main.func", "micro-benchmark\\snippets\\decorators\\assigned\\main.dec2", "micro-benchmark\\snippets\\decorators\\assigned\\main.dec1"], "micro-benchmark\\snippets\\decorators\\assigned\\main.dec1": [], "micro-benchmark\\snippets\\decorators\\assigned\\main.dec2": [], "micro-benchmark\\snippets\\decorators\\assigned\\main.func": [], "micro-benchmark\\snippets\\decorators\\call\\main": ["micro-benchmark\\snippets\\decorators\\call\\main.dec", "micro-benchmark\\snippets\\decorators\\call\\main.func"], "micro-benchmark\\snippets\\decorators\\call\\main.dec": [], "micro-benchmark\\snippets\\decorators\\call\\main.func": [], "micro-benchmark\\snippets\\decorators\\nested\\main": ["micro-benchmark\\snippets\\decorators\\nested\\main.func"], "micro-benchmark\\snippets\\decorators\\nested\\main.dec": [], "micro-benchmark\\snippets\\decorators\\nested\\main.func": ["micro-benchmark\\snippets\\decorators\\nested\\main.func.dec"], "micro-benchmark\\snippets\\decorators\\nested\\main.func.dec": [], "micro-benchmark\\snippets\\decorators\\nested\\main.func.inner": [], "micro-benchmark\\snippets\\decorators\\nested_decorators\\main": ["micro-benchmark\\snippets\\decorators\\nested_decorators\\main.dec2", "micro-benchmark\\snippets\\decorators\\nested_decorators\\main.dec1", "micro-benchmark\\snippets\\decorators\\nested_decorators\\main.func"], "micro-benchmark\\snippets\\decorators\\nested_decorators\\main.dec1": [], "micro-benchmark\\snippets\\decorators\\nested_decorators\\main.dec1.inner": ["micro-benchmark\\snippets\\decorators\\nested_decorators\\main.dec2.inner"], "micro-benchmark\\snippets\\decorators\\nested_decorators\\main.dec2.inner": ["micro-benchmark\\snippets\\decorators\\nested_decorators\\main.func"], "micro-benchmark\\snippets\\decorators\\nested_decorators\\main.dec2": [], "micro-benchmark\\snippets\\decorators\\nested_decorators\\main.func": [], "micro-benchmark\\snippets\\decorators\\param_call\\main": ["micro-benchmark\\snippets\\decorators\\param_call\\main.dec", "micro-benchmark\\snippets\\decorators\\param_call\\main.func"], "micro-benchmark\\snippets\\decorators\\param_call\\main.dec": ["micro-benchmark\\snippets\\decorators\\param_call\\main.func"], "micro-benchmark\\snippets\\decorators\\param_call\\main.func": [], "micro-benchmark\\snippets\\decorators\\return\\main": ["micro-benchmark\\snippets\\decorators\\return\\main.func2", "micro-benchmark\\snippets\\decorators\\return\\main.func1.dec", "micro-benchmark\\snippets\\decorators\\return\\main.func1"], "micro-benchmark\\snippets\\decorators\\return\\main.func1": [], "micro-benchmark\\snippets\\decorators\\return\\main.func1.dec": [], "micro-benchmark\\snippets\\decorators\\return\\main.func2": [], "micro-benchmark\\snippets\\decorators\\return_different_func\\main": ["micro-benchmark\\snippets\\decorators\\return_different_func\\main.dec", "micro-benchmark\\snippets\\decorators\\return_different_func\\main.func2"], "micro-benchmark\\snippets\\decorators\\return_different_func\\main.dec": [], "micro-benchmark\\snippets\\decorators\\return_different_func\\main.dec.inner": ["micro-benchmark\\snippets\\decorators\\return_different_func\\main.func"], "micro-benchmark\\snippets\\decorators\\return_different_func\\main.func": [], "micro-benchmark\\snippets\\decorators\\return_different_func\\main.func2": ["micro-benchmark\\snippets\\decorators\\return_different_func\\main.func"], "micro-benchmark\\snippets\\dicts\\add_key\\main": ["micro-benchmark\\snippets\\dicts\\add_key\\main.func"], "micro-benchmark\\snippets\\dicts\\add_key\\main.func": [], "micro-benchmark\\snippets\\dicts\\assign\\main": ["micro-benchmark\\snippets\\dicts\\assign\\main.func2", "micro-benchmark\\snippets\\dicts\\assign\\main.func1"], "micro-benchmark\\snippets\\dicts\\assign\\main.func1": [], "micro-benchmark\\snippets\\dicts\\assign\\main.func2": [], "micro-benchmark\\snippets\\dicts\\call\\main": ["micro-benchmark\\snippets\\dicts\\call\\main.func2", "micro-benchmark\\snippets\\dicts\\call\\main.func1"], "micro-benchmark\\snippets\\dicts\\call\\main.func1": [], "micro-benchmark\\snippets\\dicts\\call\\main.func2": [], "micro-benchmark\\snippets\\dicts\\ext_key\\ext": [], "micro-benchmark\\snippets\\dicts\\ext_key\\main": [], "micro-benchmark\\snippets\\dicts\\ext_key\\main.func": [], "micro-benchmark\\snippets\\dicts\\nested\\main": ["micro-benchmark\\snippets\\dicts\\nested\\main.func2", "micro-benchmark\\snippets\\dicts\\nested\\main.func1"], "micro-benchmark\\snippets\\dicts\\nested\\main.func1": [], "micro-benchmark\\snippets\\dicts\\nested\\main.func2": [], "micro-benchmark\\snippets\\dicts\\new_key_param\\main": ["micro-benchmark\\snippets\\dicts\\new_key_param\\main.func", "micro-benchmark\\snippets\\dicts\\new_key_param\\main.func2"], "micro-benchmark\\snippets\\dicts\\new_key_param\\main.func2": [], "micro-benchmark\\snippets\\dicts\\new_key_param\\main.func": [], "micro-benchmark\\snippets\\dicts\\param\\main": ["micro-benchmark\\snippets\\dicts\\param\\main.func1"], "micro-benchmark\\snippets\\dicts\\param\\main.func2": [], "micro-benchmark\\snippets\\dicts\\param\\main.func1": ["micro-benchmark\\snippets\\dicts\\param\\main.func2"], "micro-benchmark\\snippets\\dicts\\param_key\\main": ["micro-benchmark\\snippets\\dicts\\param_key\\main.func1"], "micro-benchmark\\snippets\\dicts\\param_key\\main.func1": ["micro-benchmark\\snippets\\dicts\\param_key\\main.func2", "micro-benchmark\\snippets\\dicts\\param_key\\main.func3"], "micro-benchmark\\snippets\\dicts\\param_key\\main.func2": [], "micro-benchmark\\snippets\\dicts\\param_key\\main.func3": [], "micro-benchmark\\snippets\\dicts\\return\\main": ["micro-benchmark\\snippets\\dicts\\return\\main.func2", "micro-benchmark\\snippets\\dicts\\return\\main.func1"], "micro-benchmark\\snippets\\dicts\\return\\main.func2": [], "micro-benchmark\\snippets\\dicts\\return\\main.func1": [], "micro-benchmark\\snippets\\dicts\\return_assign\\main": ["micro-benchmark\\snippets\\dicts\\return_assign\\main.func1", "micro-benchmark\\snippets\\dicts\\return_assign\\main.func2"], "micro-benchmark\\snippets\\dicts\\return_assign\\main.func2": [], "micro-benchmark\\snippets\\dicts\\return_assign\\main.func1": [], "micro-benchmark\\snippets\\dicts\\type_coercion\\main": ["micro-benchmark\\snippets\\dicts\\type_coercion\\main.func1"], "micro-benchmark\\snippets\\dicts\\type_coercion\\main.func1": [], "micro-benchmark\\snippets\\dicts\\type_coercion\\main.func2": [], "micro-benchmark\\snippets\\dicts\\update\\main": ["micro-benchmark\\snippets\\dicts\\update\\main.func1"], "micro-benchmark\\snippets\\dicts\\update\\main.func1": [], "micro-benchmark\\snippets\\dicts\\update\\main.func2": [], "micro-benchmark\\snippets\\direct_calls\\assigned_call\\main": ["micro-benchmark\\snippets\\direct_calls\\assigned_call\\main.return_func", "micro-benchmark\\snippets\\direct_calls\\assigned_call\\main.func"], "micro-benchmark\\snippets\\direct_calls\\assigned_call\\main.return_func": [], "micro-benchmark\\snippets\\direct_calls\\assigned_call\\main.func": [], "micro-benchmark\\snippets\\direct_calls\\imported_return_call\\main": ["to_import.func"], "micro-benchmark\\snippets\\direct_calls\\imported_return_call\\to_import": [], "micro-benchmark\\snippets\\direct_calls\\imported_return_call\\to_import.return_func": [], "micro-benchmark\\snippets\\direct_calls\\imported_return_call\\to_import.func": [], "micro-benchmark\\snippets\\direct_calls\\return_call\\main": ["micro-benchmark\\snippets\\direct_calls\\return_call\\main.return_func.nested_return_func", "micro-benchmark\\snippets\\direct_calls\\return_call\\main.return_func", "micro-benchmark\\snippets\\direct_calls\\return_call\\main.func"], "micro-benchmark\\snippets\\direct_calls\\return_call\\main.return_func": [], "micro-benchmark\\snippets\\direct_calls\\return_call\\main.return_func.nested_return_func": [], "micro-benchmark\\snippets\\direct_calls\\return_call\\main.func": [], "micro-benchmark\\snippets\\direct_calls\\with_parameters\\main": ["micro-benchmark\\snippets\\direct_calls\\with_parameters\\main.func3", "micro-benchmark\\snippets\\direct_calls\\with_parameters\\main.func2", "micro-benchmark\\snippets\\direct_calls\\with_parameters\\main.func"], "micro-benchmark\\snippets\\direct_calls\\with_parameters\\main.func": [], "micro-benchmark\\snippets\\direct_calls\\with_parameters\\main.func2": [], "micro-benchmark\\snippets\\direct_calls\\with_parameters\\main.func3": [], "micro-benchmark\\snippets\\dynamic\\eval\\main": ["<builtin>.eval"], "micro-benchmark\\snippets\\dynamic\\eval\\main.func": [], "<builtin>.eval": [], "micro-benchmark\\snippets\\exceptions\\raise\\main": ["micro-benchmark\\snippets\\exceptions\\raise\\main.A.__init__"], "micro-benchmark\\snippets\\exceptions\\raise\\main.A.__init__": [], "micro-benchmark\\snippets\\exceptions\\raise_assigned\\main": ["micro-benchmark\\snippets\\exceptions\\raise_assigned\\main.A.__init__"], "micro-benchmark\\snippets\\exceptions\\raise_assigned\\main.A.__init__": [], "micro-benchmark\\snippets\\exceptions\\raise_attr\\main": ["micro-benchmark\\snippets\\exceptions\\raise_attr\\main.A.B.__init__"], "micro-benchmark\\snippets\\exceptions\\raise_attr\\main.A.B.__init__": [], "micro-benchmark\\snippets\\external\\attribute\\main": ["ext.Cls.fun", "ext.Cls"], "ext.Cls": [], "ext.Cls.fun": [], "micro-benchmark\\snippets\\external\\attribute_assigned\\main": ["micro-benchmark\\snippets\\external\\attribute_assigned\\main.fn", "ext.Cls"], "micro-benchmark\\snippets\\external\\attribute_assigned\\main.fn": ["ext.Cls.fun"], "micro-benchmark\\snippets\\external\\cls_parent\\main": ["ext.parent.__init__", "micro-benchmark\\snippets\\external\\cls_parent\\main.A.fn"], "micro-benchmark\\snippets\\external\\cls_parent\\main.A.fn": ["ext.parent.parent_fn"], "ext.parent.parent_fn": [], "ext.parent.__init__": [], "micro-benchmark\\snippets\\external\\function\\main": ["ext.function"], "ext.function": [], "micro-benchmark\\snippets\\external\\function_asname\\main": ["ext.function"], "micro-benchmark\\snippets\\external\\function_assigned\\main": ["ext.function"], "micro-benchmark\\snippets\\functions\\assigned_call\\main": ["micro-benchmark\\snippets\\functions\\assigned_call\\main.func"], "micro-benchmark\\snippets\\functions\\assigned_call\\main.func": [], "micro-benchmark\\snippets\\functions\\assigned_call_lit_param\\main": ["micro-benchmark\\snippets\\functions\\assigned_call_lit_param\\main.func"], "micro-benchmark\\snippets\\functions\\assigned_call_lit_param\\main.func": [], "micro-benchmark\\snippets\\functions\\call\\main": ["micro-benchmark\\snippets\\functions\\call\\main.func"], "micro-benchmark\\snippets\\functions\\call\\main.func": [], "micro-benchmark\\snippets\\functions\\imported_call\\main": ["to_import.func"], "micro-benchmark\\snippets\\functions\\imported_call\\to_import": [], "micro-benchmark\\snippets\\functions\\imported_call\\to_import.func": [], "micro-benchmark\\snippets\\generators\\iterable\\main": ["micro-benchmark\\snippets\\generators\\iterable\\main.func.__init__", "micro-benchmark\\snippets\\generators\\iterable\\main.func.__next__", "micro-benchmark\\snippets\\generators\\iterable\\main.func.__iter__"], "micro-benchmark\\snippets\\generators\\iterable\\main.func.__init__": [], "micro-benchmark\\snippets\\generators\\iterable\\main.func.__iter__": [], "micro-benchmark\\snippets\\generators\\iterable\\main.func.__next__": ["<builtin>.StopIteration"], "<builtin>.StopIteration": [], "micro-benchmark\\snippets\\generators\\iterable_assigned\\main": ["micro-benchmark\\snippets\\generators\\iterable_assigned\\main.Cls.__iter__", "micro-benchmark\\snippets\\generators\\iterable_assigned\\main.Cls.__init__", "micro-benchmark\\snippets\\generators\\iterable_assigned\\main.Cls.__next__"], "micro-benchmark\\snippets\\generators\\iterable_assigned\\main.Cls.__init__": [], "micro-benchmark\\snippets\\generators\\iterable_assigned\\main.Cls.__iter__": [], "micro-benchmark\\snippets\\generators\\iterable_assigned\\main.Cls.__next__": [], "micro-benchmark\\snippets\\generators\\iter_param\\main": ["micro-benchmark\\snippets\\generators\\iter_param\\main.Cls.__init__", "micro-benchmark\\snippets\\generators\\iter_param\\main.func"], "micro-benchmark\\snippets\\generators\\iter_param\\main.func": ["micro-benchmark\\snippets\\generators\\iter_param\\main.Cls.__next__", "micro-benchmark\\snippets\\generators\\iter_param\\main.Cls.__iter__"], "micro-benchmark\\snippets\\generators\\iter_param\\main.Cls.__iter__": [], "micro-benchmark\\snippets\\generators\\iter_param\\main.Cls.__next__": [], "micro-benchmark\\snippets\\generators\\iter_param\\main.Cls.__init__": [], "micro-benchmark\\snippets\\generators\\iter_return\\main": ["micro-benchmark\\snippets\\generators\\iter_return\\main.func", "micro-benchmark\\snippets\\generators\\iter_return\\main.Cls.__iter__", "micro-benchmark\\snippets\\generators\\iter_return\\main.Cls.__next__", "micro-benchmark\\snippets\\generators\\iter_return\\main.Cls.__init__"], "micro-benchmark\\snippets\\generators\\iter_return\\main.func": [], "micro-benchmark\\snippets\\generators\\iter_return\\main.Cls.__init__": [], "micro-benchmark\\snippets\\generators\\iter_return\\main.Cls.__iter__": [], "micro-benchmark\\snippets\\generators\\iter_return\\main.Cls.__next__": [], "micro-benchmark\\snippets\\generators\\no_iter\\main": ["micro-benchmark\\snippets\\generators\\no_iter\\main.Cls.__init__"], "micro-benchmark\\snippets\\generators\\no_iter\\main.Cls.__init__": [], "micro-benchmark\\snippets\\generators\\no_iter\\main.Cls.__iter__": [], "micro-benchmark\\snippets\\generators\\no_iter\\main.Cls.__next__": [], "micro-benchmark\\snippets\\generators\\yield\\main": ["micro-benchmark\\snippets\\generators\\yield\\main.func2", "micro-benchmark\\snippets\\generators\\yield\\main.func1"], "micro-benchmark\\snippets\\generators\\yield\\main.func2": [], "micro-benchmark\\snippets\\generators\\yield\\main.func1": [], "micro-benchmark\\snippets\\imports\\chained_import\\chained_import": [], "micro-benchmark\\snippets\\imports\\chained_import\\chained_import.func1": [], "micro-benchmark\\snippets\\imports\\chained_import\\from_import": [], "micro-benchmark\\snippets\\imports\\chained_import\\from_import.func2": ["chained_import.func1"], "chained_import.func1": [], "micro-benchmark\\snippets\\imports\\chained_import\\main": ["from_import.func2"], "from_import.func2": [], "micro-benchmark\\snippets\\imports\\import_all\\from_module": [], "micro-benchmark\\snippets\\imports\\import_all\\from_module.func1": [], "micro-benchmark\\snippets\\imports\\import_all\\from_module.func2": [], "micro-benchmark\\snippets\\imports\\import_all\\main": [], "micro-benchmark\\snippets\\imports\\import_as\\main": [], "micro-benchmark\\snippets\\imports\\import_as\\main.func": [], "micro-benchmark\\snippets\\imports\\import_as\\to_import": [], "micro-benchmark\\snippets\\imports\\import_as\\to_import.func": [], "micro-benchmark\\snippets\\imports\\import_from\\from_module": [], "micro-benchmark\\snippets\\imports\\import_from\\from_module.func": [], "micro-benchmark\\snippets\\imports\\import_from\\main": ["from_module.func"], "from_module.func": [], "micro-benchmark\\snippets\\imports\\init_func_import\\main": ["nested.func", "nested.func2"], "nested.func": [], "nested.func2": [], "micro-benchmark\\snippets\\imports\\init_func_import\\nested\\mod": [], "micro-benchmark\\snippets\\imports\\init_func_import\\nested\\mod.func2": [], "micro-benchmark\\snippets\\imports\\init_import\\main": ["nested.smth.func"], "nested.smth.func": [], "micro-benchmark\\snippets\\imports\\init_import\\nested\\nested": [], "micro-benchmark\\snippets\\imports\\init_import\\nested\\nested.Smth.func": [], "micro-benchmark\\snippets\\imports\\parent_import\\main": [], "micro-benchmark\\snippets\\imports\\parent_import\\main.func": [], "micro-benchmark\\snippets\\imports\\parent_import\\nested\\to_import": [], "micro-benchmark\\snippets\\imports\\parent_import\\nested\\to_import.func": [], "micro-benchmark\\snippets\\imports\\parent_import\\to_import2": [], "micro-benchmark\\snippets\\imports\\parent_import\\to_import2.func": [], "micro-benchmark\\snippets\\imports\\relative_import\\main": [], "micro-benchmark\\snippets\\imports\\relative_import\\main.func": [], "micro-benchmark\\snippets\\imports\\relative_import\\to_import": [], "micro-benchmark\\snippets\\imports\\relative_import\\to_import.func": [], "micro-benchmark\\snippets\\imports\\relative_import_with_name\\main": ["nested.to_import.func1"], "nested.to_import.func1": [], "micro-benchmark\\snippets\\imports\\relative_import_with_name\\nested\\relative": [], "micro-benchmark\\snippets\\imports\\relative_import_with_name\\nested\\relative.func2": [], "micro-benchmark\\snippets\\imports\\relative_import_with_name\\nested\\to_import": [], "micro-benchmark\\snippets\\imports\\relative_import_with_name\\nested\\to_import.func1": ["relative.func2"], "relative.func2": [], "micro-benchmark\\snippets\\imports\\simple_import\\main": [], "micro-benchmark\\snippets\\imports\\simple_import\\main.func": [], "micro-benchmark\\snippets\\imports\\simple_import\\to_import": [], "micro-benchmark\\snippets\\imports\\simple_import\\to_import.func": [], "micro-benchmark\\snippets\\imports\\submodule_import\\main": [], "micro-benchmark\\snippets\\imports\\submodule_import\\main.func": [], "micro-benchmark\\snippets\\imports\\submodule_import\\to_import\\to_import": [], "micro-benchmark\\snippets\\imports\\submodule_import\\to_import\\to_import.func": [], "micro-benchmark\\snippets\\imports\\submodule_import_all\\from_module\\nested_module": [], "micro-benchmark\\snippets\\imports\\submodule_import_all\\from_module\\nested_module.func1": [], "micro-benchmark\\snippets\\imports\\submodule_import_all\\from_module\\nested_module.func2": [], "micro-benchmark\\snippets\\imports\\submodule_import_all\\main": [], "micro-benchmark\\snippets\\imports\\submodule_import_as\\main": [], "micro-benchmark\\snippets\\imports\\submodule_import_as\\main.func": [], "micro-benchmark\\snippets\\imports\\submodule_import_as\\to_import\\to_import": [], "micro-benchmark\\snippets\\imports\\submodule_import_as\\to_import\\to_import.func": [], "micro-benchmark\\snippets\\imports\\submodule_import_from\\from_module\\nested_module": [], "micro-benchmark\\snippets\\imports\\submodule_import_from\\from_module\\nested_module.func1": [], "micro-benchmark\\snippets\\imports\\submodule_import_from\\from_module\\nested_module.func2": [], "micro-benchmark\\snippets\\imports\\submodule_import_from\\main": ["from_module.nested_module.func1", "from_module.nested_module.func2"], "from_module.nested_module.func1": [], "from_module.nested_module.func2": [], "micro-benchmark\\snippets\\kwargs\\assigned_call\\main": ["micro-benchmark\\snippets\\kwargs\\assigned_call\\main.func"], "micro-benchmark\\snippets\\kwargs\\assigned_call\\main.func2": [], "micro-benchmark\\snippets\\kwargs\\assigned_call\\main.func": ["micro-benchmark\\snippets\\kwargs\\assigned_call\\main.func2"], "micro-benchmark\\snippets\\kwargs\\call\\main": ["micro-benchmark\\snippets\\kwargs\\call\\main.func"], "micro-benchmark\\snippets\\kwargs\\call\\main.func4": [], "micro-benchmark\\snippets\\kwargs\\call\\main.func2": [], "micro-benchmark\\snippets\\kwargs\\call\\main.func3": [], "micro-benchmark\\snippets\\kwargs\\call\\main.func": ["micro-benchmark\\snippets\\kwargs\\call\\main.func3", "micro-benchmark\\snippets\\kwargs\\call\\main.func4", "micro-benchmark\\snippets\\kwargs\\call\\main.func2"], "micro-benchmark\\snippets\\kwargs\\chained_call\\main": ["micro-benchmark\\snippets\\kwargs\\chained_call\\main.func1"], "micro-benchmark\\snippets\\kwargs\\chained_call\\main.func3": [], "micro-benchmark\\snippets\\kwargs\\chained_call\\main.func2": ["micro-benchmark\\snippets\\kwargs\\chained_call\\main.func3", "micro-benchmark\\snippets\\kwargs\\chained_call\\main.func2"], "micro-benchmark\\snippets\\kwargs\\chained_call\\main.func1": ["micro-benchmark\\snippets\\kwargs\\chained_call\\main.func2"], "micro-benchmark\\snippets\\lambdas\\call\\main": ["micro-benchmark\\snippets\\lambdas\\call\\main.<lambda1>"], "micro-benchmark\\snippets\\lambdas\\call\\main.<lambda1>": [], "micro-benchmark\\snippets\\lambdas\\calls_parameter\\main": ["micro-benchmark\\snippets\\lambdas\\calls_parameter\\main.<lambda1>"], "micro-benchmark\\snippets\\lambdas\\calls_parameter\\main.func1": [], "micro-benchmark\\snippets\\lambdas\\calls_parameter\\main.func2": [], "micro-benchmark\\snippets\\lambdas\\calls_parameter\\main.<lambda1>": ["micro-benchmark\\snippets\\lambdas\\calls_parameter\\main.func2", "micro-benchmark\\snippets\\lambdas\\calls_parameter\\main.func1"], "micro-benchmark\\snippets\\lambdas\\chained_calls\\main": ["micro-benchmark\\snippets\\lambdas\\chained_calls\\main.func1"], "micro-benchmark\\snippets\\lambdas\\chained_calls\\main.func3": ["micro-benchmark\\snippets\\lambdas\\chained_calls\\main.<lambda3>"], "micro-benchmark\\snippets\\lambdas\\chained_calls\\main.<lambda3>": [], "micro-benchmark\\snippets\\lambdas\\chained_calls\\main.func2": ["micro-benchmark\\snippets\\lambdas\\chained_calls\\main.func3", "micro-benchmark\\snippets\\lambdas\\chained_calls\\main.<lambda2>"], "micro-benchmark\\snippets\\lambdas\\chained_calls\\main.<lambda2>": [], "micro-benchmark\\snippets\\lambdas\\chained_calls\\main.func1": ["micro-benchmark\\snippets\\lambdas\\chained_calls\\main.func2", "micro-benchmark\\snippets\\lambdas\\chained_calls\\main.<lambda1>"], "micro-benchmark\\snippets\\lambdas\\chained_calls\\main.<lambda1>": [], "micro-benchmark\\snippets\\lambdas\\parameter_call\\main": ["micro-benchmark\\snippets\\lambdas\\parameter_call\\main.func"], "micro-benchmark\\snippets\\lambdas\\parameter_call\\main.func": ["micro-benchmark\\snippets\\lambdas\\parameter_call\\main.<lambda1>"], "micro-benchmark\\snippets\\lambdas\\parameter_call\\main.<lambda1>": [], "micro-benchmark\\snippets\\lambdas\\return_call\\main": ["micro-benchmark\\snippets\\lambdas\\return_call\\main.func.<lambda1>", "micro-benchmark\\snippets\\lambdas\\return_call\\main.func"], "micro-benchmark\\snippets\\lambdas\\return_call\\main.func": [], "micro-benchmark\\snippets\\lambdas\\return_call\\main.func.<lambda1>": [], "micro-benchmark\\snippets\\lists\\comprehension_if\\main": ["<builtin>.range", "micro-benchmark\\snippets\\lists\\comprehension_if\\main.func"], "micro-benchmark\\snippets\\lists\\comprehension_if\\main.func": [], "<builtin>.range": [], "micro-benchmark\\snippets\\lists\\comprehension_val\\main": ["micro-benchmark\\snippets\\lists\\comprehension_val\\main.func", "<builtin>.range"], "micro-benchmark\\snippets\\lists\\comprehension_val\\main.func": [], "micro-benchmark\\snippets\\lists\\ext_index\\ext": [], "micro-benchmark\\snippets\\lists\\ext_index\\main": [], "micro-benchmark\\snippets\\lists\\ext_index\\main.func1": [], "micro-benchmark\\snippets\\lists\\ext_index\\main.func2": [], "micro-benchmark\\snippets\\lists\\nested\\main": ["micro-benchmark\\snippets\\lists\\nested\\main.func1"], "micro-benchmark\\snippets\\lists\\nested\\main.func1": [], "micro-benchmark\\snippets\\lists\\nested\\main.func2": [], "micro-benchmark\\snippets\\lists\\nested_comprehension\\main": ["<builtin>.range", "micro-benchmark\\snippets\\lists\\nested_comprehension\\main.func2", "micro-benchmark\\snippets\\lists\\nested_comprehension\\main.func1"], "micro-benchmark\\snippets\\lists\\nested_comprehension\\main.func1": [], "micro-benchmark\\snippets\\lists\\nested_comprehension\\main.func2": [], "micro-benchmark\\snippets\\lists\\param_index\\main": ["micro-benchmark\\snippets\\lists\\param_index\\main.func1"], "micro-benchmark\\snippets\\lists\\param_index\\main.func2": [], "micro-benchmark\\snippets\\lists\\param_index\\main.func1": ["micro-benchmark\\snippets\\lists\\param_index\\main.func2"], "micro-benchmark\\snippets\\lists\\simple\\main": ["micro-benchmark\\snippets\\lists\\simple\\main.func2", "micro-benchmark\\snippets\\lists\\simple\\main.func3", "micro-benchmark\\snippets\\lists\\simple\\main.func4", "micro-benchmark\\snippets\\lists\\simple\\main.func1"], "micro-benchmark\\snippets\\lists\\simple\\main.func1": [], "micro-benchmark\\snippets\\lists\\simple\\main.func2": [], "micro-benchmark\\snippets\\lists\\simple\\main.func3": [], "micro-benchmark\\snippets\\lists\\simple\\main.func4": [], "micro-benchmark\\snippets\\lists\\slice\\main": [], "micro-benchmark\\snippets\\lists\\slice\\main.func1": [], "micro-benchmark\\snippets\\lists\\slice\\main.func2": [], "micro-benchmark\\snippets\\lists\\slice\\main.func3": [], "micro-benchmark\\snippets\\mro\\basic\\main": ["micro-benchmark\\snippets\\mro\\basic\\main.A.func"], "micro-benchmark\\snippets\\mro\\basic\\main.A.func": [], "micro-benchmark\\snippets\\mro\\basic_init\\main": ["micro-benchmark\\snippets\\mro\\basic_init\\main.B.func", "micro-benchmark\\snippets\\mro\\basic_init\\main.A.__init__"], "micro-benchmark\\snippets\\mro\\basic_init\\main.A.__init__": [], "micro-benchmark\\snippets\\mro\\basic_init\\main.B.func": [], "micro-benchmark\\snippets\\mro\\parents_same_superclass\\main": ["micro-benchmark\\snippets\\mro\\parents_same_superclass\\main.C.func", "micro-benchmark\\snippets\\mro\\parents_same_superclass\\main.A.__init__"], "micro-benchmark\\snippets\\mro\\parents_same_superclass\\main.A.__init__": [], "micro-benchmark\\snippets\\mro\\parents_same_superclass\\main.A.func": [], "micro-benchmark\\snippets\\mro\\parents_same_superclass\\main.C.func": [], "micro-benchmark\\snippets\\mro\\self_assignment\\main": ["micro-benchmark\\snippets\\mro\\self_assignment\\main.A.func", "micro-benchmark\\snippets\\mro\\self_assignment\\main.B.funcb", "micro-benchmark\\snippets\\mro\\self_assignment\\main.A.funca"], "micro-benchmark\\snippets\\mro\\self_assignment\\main.B.funcb": [], "micro-benchmark\\snippets\\mro\\self_assignment\\main.B.func": [], "micro-benchmark\\snippets\\mro\\self_assignment\\main.A.funca": [], "micro-benchmark\\snippets\\mro\\self_assignment\\main.A.func": [], "micro-benchmark\\snippets\\mro\\super_call\\main": ["micro-benchmark\\snippets\\mro\\super_call\\main.C.__init__"], "micro-benchmark\\snippets\\mro\\super_call\\main.A.__init__": [], "micro-benchmark\\snippets\\mro\\super_call\\main.B.__init__": ["<builtin>.super"], "micro-benchmark\\snippets\\mro\\super_call\\main.C.__init__": ["<builtin>.super"], "micro-benchmark\\snippets\\mro\\two_parents\\main": ["micro-benchmark\\snippets\\mro\\two_parents\\main.B.__init__", "micro-benchmark\\snippets\\mro\\two_parents\\main.A.func"], "micro-benchmark\\snippets\\mro\\two_parents\\main.A.func": [], "micro-benchmark\\snippets\\mro\\two_parents\\main.B.__init__": [], "micro-benchmark\\snippets\\mro\\two_parents\\main.B.func": [], "micro-benchmark\\snippets\\mro\\two_parents_method_defined\\main": ["micro-benchmark\\snippets\\mro\\two_parents_method_defined\\main.C.__init__", "micro-benchmark\\snippets\\mro\\two_parents_method_defined\\main.C.func"], "micro-benchmark\\snippets\\mro\\two_parents_method_defined\\main.A.__init__": [], "micro-benchmark\\snippets\\mro\\two_parents_method_defined\\main.B.func": [], "micro-benchmark\\snippets\\mro\\two_parents_method_defined\\main.C.__init__": [], "micro-benchmark\\snippets\\mro\\two_parents_method_defined\\main.C.func": [], "micro-benchmark\\snippets\\returns\\call\\main": ["micro-benchmark\\snippets\\returns\\call\\main.return_func", "micro-benchmark\\snippets\\returns\\call\\main.func"], "micro-benchmark\\snippets\\returns\\call\\main.return_func": [], "micro-benchmark\\snippets\\returns\\call\\main.func": [], "micro-benchmark\\snippets\\returns\\imported_call\\main": ["to_import.func"], "micro-benchmark\\snippets\\returns\\imported_call\\to_import": [], "micro-benchmark\\snippets\\returns\\imported_call\\to_import.return_func": [], "micro-benchmark\\snippets\\returns\\imported_call\\to_import.func": [], "micro-benchmark\\snippets\\returns\\nested_import_call\\main": ["to_import.func"], "micro-benchmark\\snippets\\returns\\nested_import_call\\to_import": [], "micro-benchmark\\snippets\\returns\\nested_import_call\\to_import.func": [], "micro-benchmark\\snippets\\returns\\nested_import_call\\to_import2": [], "micro-benchmark\\snippets\\returns\\nested_import_call\\to_import2.return_func": [], "micro-benchmark\\snippets\\returns\\return_complex\\main": ["micro-benchmark\\snippets\\returns\\return_complex\\main.func4", "micro-benchmark\\snippets\\returns\\return_complex\\main.func", "micro-benchmark\\snippets\\returns\\return_complex\\main.func2", "micro-benchmark\\snippets\\returns\\return_complex\\main.func5"], "micro-benchmark\\snippets\\returns\\return_complex\\main.func": [], "micro-benchmark\\snippets\\returns\\return_complex\\main.func2": [], "micro-benchmark\\snippets\\returns\\return_complex\\main.func3": [], "micro-benchmark\\snippets\\returns\\return_complex\\main.func4": ["micro-benchmark\\snippets\\returns\\return_complex\\main.func3"], "micro-benchmark\\snippets\\returns\\return_complex\\main.func5": ["micro-benchmark\\snippets\\returns\\return_complex\\main.func2"], "micro-benchmark-key-errs\\base": ["unittest.main"], "micro-benchmark-key-errs\\base.TestBase.setUp": ["os.environ.get", "importlib.import_module", "<builtin>.getattr", "micro-benchmark-key-errs\\base.TestBase.setUp.error"], "micro-benchmark-key-errs\\base.TestBase.setUp.error": ["<builtin>.print", "sys.exit"], "micro-benchmark-key-errs\\base.TestBase.validate_snippet": ["micro-benchmark-key-errs\\base.TestBase.assertEqual", "micro-benchmark-key-errs\\base.TestBase.get_snippet_output_cg", "micro-benchmark-key-errs\\base.TestBase.get_snippet_expected_cg"], "micro-benchmark-key-errs\\base.TestBase.get_snippet_output_cg": ["os.path.join"], "micro-benchmark-key-errs\\base.TestBase.get_snippet_expected_cg": ["json.loads", "<builtin>.open", "os.path.join"], "micro-benchmark-key-errs\\base.TestBase.assertEqual": ["<builtin>.super"], "micro-benchmark-key-errs\\base.TestBase.get_snippet_path": ["os.path.join"], "micro-benchmark-key-errs\\create_pytests": ["os.path.relpath", "os.path.join", "micro-benchmark-key-errs\\create_pytests.create_test_case", "os.path.dirname", "os.listdir"], "micro-benchmark-key-errs\\create_pytests.create_test_case": ["os.listdir.split", "<builtin>.open", "os.path.join", "os.listdir"], "micro-benchmark-key-errs\\snippets\\assignments\\chained\\main": [], "micro-benchmark-key-errs\\snippets\\assignments\\recursive_tuple\\main": [], "micro-benchmark-key-errs\\snippets\\assignments\\starred\\main": [], "micro-benchmark-key-errs\\snippets\\classes\\assigned_str\\main": [], "micro-benchmark-key-errs\\snippets\\classes\\base_class_const\\main": ["micro-benchmark-key-errs\\snippets\\classes\\base_class_const\\main.Cls.func"], "micro-benchmark-key-errs\\snippets\\classes\\base_class_const\\main.Cls.func": [], "micro-benchmark-key-errs\\snippets\\classes\\return_str\\main": ["micro-benchmark-key-errs\\snippets\\classes\\return_str\\main.Cls.func"], "micro-benchmark-key-errs\\snippets\\classes\\return_str\\main.Cls.func": [], "micro-benchmark-key-errs\\snippets\\classes\\self_assignment\\main": [], "micro-benchmark-key-errs\\snippets\\classes\\self_const\\main": ["micro-benchmark-key-errs\\snippets\\classes\\self_const\\main.Cls.func"], "micro-benchmark-key-errs\\snippets\\classes\\self_const\\main.Cls.func": [], "micro-benchmark-key-errs\\snippets\\classes\\self_dict\\main": [], "micro-benchmark-key-errs\\snippets\\classes\\self_dict\\main.Cls.func": [], "micro-benchmark-key-errs\\snippets\\dicts\\add_key\\main": [], "micro-benchmark-key-errs\\snippets\\dicts\\ext_key\\ext": [], "micro-benchmark-key-errs\\snippets\\dicts\\ext_key\\main": [], "micro-benchmark-key-errs\\snippets\\dicts\\mutable_param\\main": ["micro-benchmark-key-errs\\snippets\\dicts\\mutable_param\\main.func"], "micro-benchmark-key-errs\\snippets\\dicts\\mutable_param\\main.func": [], "micro-benchmark-key-errs\\snippets\\dicts\\nested\\main": [], "micro-benchmark-key-errs\\snippets\\dicts\\return\\main": ["micro-benchmark-key-errs\\snippets\\dicts\\return\\main.func"], "micro-benchmark-key-errs\\snippets\\dicts\\return\\main.func": [], "micro-benchmark-key-errs\\snippets\\dicts\\return_direct\\main": ["micro-benchmark-key-errs\\snippets\\dicts\\return_direct\\main.func"], "micro-benchmark-key-errs\\snippets\\dicts\\return_direct\\main.func": [], "micro-benchmark-key-errs\\snippets\\dicts\\simple\\main": [], "micro-benchmark-key-errs\\snippets\\dicts\\type_coercion\\main": [], "micro-benchmark-key-errs\\snippets\\dicts\\update\\main": [], "micro-benchmark-key-errs\\snippets\\kwargs\\assigned_call\\main": ["micro-benchmark-key-errs\\snippets\\kwargs\\assigned_call\\main.func"], "micro-benchmark-key-errs\\snippets\\kwargs\\assigned_call\\main.func": [], "micro-benchmark-key-errs\\snippets\\kwargs\\call\\main": ["micro-benchmark-key-errs\\snippets\\kwargs\\call\\main.func"], "micro-benchmark-key-errs\\snippets\\kwargs\\call\\main.func": [], "micro-benchmark-key-errs\\snippets\\lists\\comprehension\\main": [], "micro-benchmark-key-errs\\snippets\\lists\\list_str\\main": [], "micro-benchmark-key-errs\\snippets\\parameters\\assigned_call\\main": ["micro-benchmark-key-errs\\snippets\\parameters\\assigned_call\\main.func"], "micro-benchmark-key-errs\\snippets\\parameters\\assigned_call\\main.func": [], "micro-benchmark-key-errs\\snippets\\parameters\\call\\main": ["micro-benchmark-key-errs\\snippets\\parameters\\call\\main.func"], "micro-benchmark-key-errs\\snippets\\parameters\\call\\main.func": [], "micro-benchmark-key-errs\\snippets\\parameters\\imported_assigned_call\\main": ["micro-benchmark-key-errs\\snippets\\parameters\\imported_assigned_call\\main.func"], "micro-benchmark-key-errs\\snippets\\parameters\\imported_assigned_call\\main.func": [], "micro-benchmark-key-errs\\snippets\\parameters\\imported_assigned_call\\to_import": [], "pycg\\formats\\as_graph": [], "pycg\\formats\\as_graph.AsGraph.__init__": [], "pycg\\formats\\as_graph.AsGraph.generate": ["<builtin>.list"], "<builtin>.list": [], "pycg\\formats\\base": [], "pycg\\formats\\base.BaseFormatter.generate": ["<builtin>.NotImplementedError"], "<builtin>.NotImplementedError": [], "pycg\\formats\\fasten": [], "pycg\\formats\\fasten.Fasten.__init__": [], "pycg\\formats\\fasten.Fasten.get_unique_and_increment": [], "pycg\\formats\\fasten.Fasten.to_uri": ["<builtin>.len", "<builtin>.Exception"], "<builtin>.Exception": [], "pycg\\formats\\fasten.Fasten.to_external_uri": ["<builtin>.len"], "pycg\\formats\\fasten.Fasten.find_dependencies": ["<builtin>.sorted", "os.path.join", "pycg\\formats\\fasten.Fasten.find_dependencies.add_range", "<builtin>.open", "pkg_resources.Requirement.parse", "os.path.exists"], "os.path.exists": [], "pkg_resources.Requirement.parse": [], "pycg\\formats\\fasten.Fasten.find_dependencies.add_range": [], "pycg\\formats\\fasten.Fasten.find_dependencies.<lambda1>": [], "pycg\\formats\\fasten.Fasten.get_internal_modules": ["pycg\\formats\\fasten.Fasten.add_superclasses", "<builtin>.dict", "pycg\\formats\\fasten.Fasten.to_uri", "pycg\\formats\\fasten.Fasten.get_unique_and_increment"], "<builtin>.dict": [], "pycg\\formats\\fasten.Fasten.add_superclasses": ["pycg\\formats\\fasten.Fasten.to_external_uri", "pycg\\formats\\fasten.Fasten.to_uri"], "pycg\\formats\\fasten.Fasten.create_namespaces_map": ["<builtin>.zip"], "<builtin>.zip": [], "pycg\\formats\\fasten.Fasten.get_external_modules": ["pycg\\formats\\fasten.Fasten.to_external_uri", "<builtin>.dict", "<builtin>.str", "pycg\\formats\\fasten.Fasten.get_unique_and_increment"], "<builtin>.str": [], "pycg\\formats\\fasten.Fasten.get_graph": ["pycg\\formats\\fasten.Fasten.create_namespaces_map", "<builtin>.len", "pycg\\formats\\fasten.Fasten.to_uri", "pycg\\formats\\fasten.Fasten.to_external_uri"], "pycg\\formats\\fasten.Fasten.generate": ["pycg\\formats\\fasten.Fasten.find_dependencies", "pycg\\formats\\fasten.Fasten.get_graph", "pycg\\formats\\fasten.Fasten.get_unique_and_increment", "pycg\\formats\\fasten.Fasten.get_internal_modules", "pycg\\formats\\fasten.Fasten.get_external_modules"], "pycg\\formats\\simple": [], "pycg\\formats\\simple.Simple.__init__": [], "pycg\\formats\\simple.Simple.generate": ["<builtin>.list"], "pycg\\machinery\\callgraph": [], "pycg\\machinery\\callgraph.CallGraph.__init__": [], "pycg\\machinery\\callgraph.CallGraph.add_node": ["<builtin>.isinstance", "<builtin>.set"], "<builtin>.isinstance": [], "<builtin>.set": [], "pycg\\machinery\\callgraph.CallGraph.add_edge": ["pycg\\machinery\\callgraph.CallGraph.add_node"], "pycg\\machinery\\callgraph.CallGraph.get": [], "pycg\\machinery\\callgraph.CallGraph.get_edges": [], "pycg\\machinery\\callgraph.CallGraph.get_modules": [], "pycg\\machinery\\classes": [], "pycg\\machinery\\classes.ClassManager.__init__": [], "pycg\\machinery\\classes.ClassManager.get": [], "pycg\\machinery\\classes.ClassManager.create": ["pycg\\machinery\\classes.ClassNode.__init__"], "pycg\\machinery\\classes.ClassNode.__init__": [], "pycg\\machinery\\classes.ClassManager.get_classes": [], "pycg\\machinery\\classes.ClassNode.add_parent": ["<builtin>.isinstance", "pycg\\machinery\\classes.ClassNode.fix_mro"], "pycg\\machinery\\classes.ClassNode.fix_mro": ["<builtin>.enumerate"], "<builtin>.enumerate": [], "pycg\\machinery\\classes.ClassNode.get_mro": [], "pycg\\machinery\\classes.ClassNode.get_module": [], "pycg\\machinery\\classes.ClassNode.compute_mro": [], "pycg\\machinery\\classes.ClassNode.clear_mro": [], "pycg\\machinery\\definitions": [], "pycg\\machinery\\definitions.DefinitionManager.__init__": [], "pycg\\machinery\\definitions.DefinitionManager.create": ["<builtin>.isinstance", "pycg\\machinery\\definitions.DefinitionManager.get", "pycg\\machinery\\definitions.Definition.__init__"], "pycg\\machinery\\definitions.DefinitionManager.get": [], "pycg\\machinery\\definitions.Definition.__init__": ["pycg.machinery.pointers.NamePointer", "pycg.machinery.pointers.LiteralPointer"], "pycg\\machinery\\definitions.DefinitionManager.assign": ["pycg.utils.join_ns", "pycg\\machinery\\definitions.Definition.__init__"], "pycg.utils.join_ns": [], "pycg\\machinery\\definitions.DefinitionManager.get_defs": [], "pycg\\machinery\\definitions.DefinitionManager.handle_function_def": ["pycg.utils.join_ns", "<builtin>.set", "pycg\\machinery\\definitions.DefinitionManager.get", "pycg\\machinery\\definitions.DefinitionManager.create"], "pycg\\machinery\\definitions.DefinitionManager.handle_class_def": ["pycg.utils.join_ns", "pycg\\machinery\\definitions.DefinitionManager.get", "pycg\\machinery\\definitions.DefinitionManager.create"], "pycg\\machinery\\definitions.DefinitionManager.transitive_closure": ["pycg\\machinery\\definitions.DefinitionManager.transitive_closure.dfs"], "pycg\\machinery\\definitions.DefinitionManager.transitive_closure.dfs": ["pycg\\machinery\\definitions.DefinitionManager.transitive_closure.dfs", "<builtin>.set"], "pycg\\machinery\\definitions.DefinitionManager.complete_definitions": ["<builtin>.range", "pycg\\machinery\\definitions.DefinitionManager.complete_definitions.update_pointsto_args", "<builtin>.len"], "pycg\\machinery\\definitions.DefinitionManager.complete_definitions.update_pointsto_args": [], "pycg.machinery.pointers.LiteralPointer": [], "pycg.machinery.pointers.NamePointer": [], "pycg\\machinery\\definitions.Definition.get_type": [], "pycg\\machinery\\definitions.Definition.is_function_def": [], "pycg\\machinery\\definitions.Definition.is_ext_def": [], "pycg\\machinery\\definitions.Definition.is_callable": ["pycg\\machinery\\definitions.Definition.is_function_def", "pycg\\machinery\\definitions.Definition.is_ext_def"], "pycg\\machinery\\definitions.Definition.get_lit_pointer": [], "pycg\\machinery\\definitions.Definition.get_name_pointer": [], "pycg\\machinery\\definitions.Definition.get_name": ["pycg.utils.join_ns.split"], "pycg.utils.join_ns.split": [], "pycg\\machinery\\definitions.Definition.get_ns": [], "pycg\\machinery\\definitions.Definition.merge": [], "pycg\\machinery\\imports": [], "pycg\\machinery\\imports.get_custom_loader": [], "pycg\\machinery\\imports.get_custom_loader.CustomLoader.__init__": ["pycg\\machinery\\imports.ImportManager.get_node", "pycg\\machinery\\imports.ImportManager.create_edge", "pycg\\machinery\\imports.ImportManager.set_filepath", "pycg\\machinery\\imports.ImportManager.create_node"], "pycg\\machinery\\imports.ImportManager.create_edge": ["pycg\\machinery\\imports.ImportManager.get_node", "<builtin>.isinstance", "pycg\\machinery\\imports.ImportManager._get_module_path"], "pycg\\machinery\\imports.ImportManager.get_node": [], "pycg\\machinery\\imports.ImportManager.create_node": ["pycg\\machinery\\imports.ImportManager.get_node", "<builtin>.isinstance", "<builtin>.set"], "pycg\\machinery\\imports.ImportManager.set_filepath": ["pycg\\machinery\\imports.ImportManager.get_node", "<builtin>.isinstance", "os.path.abspath"], "pycg\\machinery\\imports.get_custom_loader.CustomLoader.get_filename": [], "pycg\\machinery\\imports.get_custom_loader.CustomLoader.get_data": [], "pycg\\machinery\\imports.ImportManager.__init__": ["<builtin>.dict"], "pycg\\machinery\\imports.ImportManager.set_pkg": [], "pycg\\machinery\\imports.ImportManager.get_mod_dir": [], "pycg\\machinery\\imports.ImportManager._get_module_path": [], "pycg\\machinery\\imports.ImportManager._clear_caches": ["sys.path_importer_cache.clear", "importlib.invalidate_caches"], "importlib.invalidate_caches": [], "sys.path_importer_cache.clear": [], "pycg\\machinery\\imports.ImportManager.set_current_mod": ["os.path.abspath"], "pycg\\machinery\\imports.ImportManager.get_filepath": [], "pycg\\machinery\\imports.ImportManager.get_imports": [], "pycg\\machinery\\imports.ImportManager._is_init_file": ["os.path.abspath.endswith"], "os.path.abspath.endswith": [], "pycg\\machinery\\imports.ImportManager._handle_import_level": ["pycg\\machinery\\imports.ImportManager._is_init_file", "pycg\\machinery\\imports.ImportManager._get_module_path", "<builtin>.ImportError", "<builtin>.len"], "<builtin>.ImportError": [], "pycg\\machinery\\imports.ImportManager._do_import": ["importlib.import_module", "importlib.util.module_from_spec", "importlib.util.find_spec", "pycg\\machinery\\imports.ImportManager.create_edge"], "importlib.util.find_spec": [], "importlib.util.module_from_spec": [], "pycg\\machinery\\imports.ImportManager.handle_import": ["importlib.util.module_from_spec.__file__.endswith", "os.path.relpath", "pycg.utils.to_mod_name", "pycg.utils.join_ns", "pycg\\machinery\\imports.ImportManager._handle_import_level", "os.path.split", "<builtin>.hasattr", "importlib.import_module.__file__.endswith", "pycg\\machinery\\imports.ImportManager._do_import", "pycg\\machinery\\imports.ImportManager.create_edge"], "<builtin>.hasattr": [], "importlib.import_module.__file__.endswith": [], "importlib.util.module_from_spec.__file__.endswith": [], "os.path.split": [], "pycg.utils.to_mod_name": [], "pycg\\machinery\\imports.ImportManager.get_import_graph": [], "pycg\\machinery\\imports.ImportManager.install_hooks": ["sys.path_hooks.insert", "importlib.machinery.all_suffixes", "os.path.abspath", "pycg\\machinery\\imports.get_custom_loader", "pycg\\machinery\\imports.ImportManager._clear_caches", "copy.deepcopy", "importlib.machinery.FileFinder.path_hook", "sys.path.insert"], "copy.deepcopy": [], "importlib.machinery.all_suffixes": [], "importlib.machinery.FileFinder.path_hook": [], "sys.path_hooks.insert": [], "sys.path.insert": [], "pycg\\machinery\\imports.ImportManager.remove_hooks": ["pycg\\machinery\\imports.ImportManager._clear_caches"], "pycg\\machinery\\key_err": [], "pycg\\machinery\\key_err.KeyErrors.__init__": [], "pycg\\machinery\\key_err.KeyErrors.add": [], "pycg\\machinery\\key_err.KeyErrors.get": [], "pycg\\machinery\\modules": [], "pycg\\machinery\\modules.ModuleManager.__init__": [], "pycg\\machinery\\modules.ModuleManager.create": ["pycg\\machinery\\modules.Module.__init__"], "pycg\\machinery\\modules.Module.__init__": ["<builtin>.dict"], "pycg\\machinery\\modules.ModuleManager.get": [], "pycg\\machinery\\modules.ModuleManager.get_internal_modules": [], "pycg\\machinery\\modules.ModuleManager.get_external_modules": [], "pycg\\machinery\\modules.Module.get_name": [], "pycg\\machinery\\modules.Module.get_filename": [], "pycg\\machinery\\modules.Module.get_methods": [], "pycg\\machinery\\modules.Module.add_method": ["<builtin>.dict"], "pycg\\machinery\\pointers": [], "pycg\\machinery\\pointers.Pointer.__init__": ["<builtin>.set"], "pycg\\machinery\\pointers.Pointer.add": [], "pycg\\machinery\\pointers.Pointer.add_set": [], "pycg\\machinery\\pointers.Pointer.get": [], "pycg\\machinery\\pointers.Pointer.merge": [], "pycg\\machinery\\pointers.LiteralPointer.add": ["<builtin>.isinstance"], "pycg\\machinery\\pointers.NamePointer.__init__": ["<builtin>.super"], "pycg\\machinery\\pointers.NamePointer._sanitize_pos": ["<builtin>.int"], "<builtin>.int": [], "pycg\\machinery\\pointers.NamePointer.get_or_create": ["<builtin>.set"], "pycg\\machinery\\pointers.NamePointer.add_arg": ["<builtin>.isinstance", "pycg\\machinery\\pointers.NamePointer.get_or_create", "<builtin>.Exception"], "pycg\\machinery\\pointers.NamePointer.add_lit_arg": ["<builtin>.isinstance", "pycg\\machinery\\pointers.NamePointer.get_or_create"], "pycg\\machinery\\pointers.NamePointer.add_pos_arg": ["pycg\\machinery\\pointers.NamePointer._sanitize_pos", "<builtin>.str", "pycg\\machinery\\pointers.NamePointer.add_arg"], "pycg\\machinery\\pointers.NamePointer.add_name_arg": ["pycg\\machinery\\pointers.NamePointer.add_arg"], "pycg\\machinery\\pointers.NamePointer.add_pos_lit_arg": ["pycg\\machinery\\pointers.NamePointer._sanitize_pos", "<builtin>.str", "pycg\\machinery\\pointers.NamePointer.add_lit_arg"], "pycg\\machinery\\pointers.NamePointer.get_pos_arg": ["pycg\\machinery\\pointers.NamePointer._sanitize_pos", "pycg\\machinery\\pointers.NamePointer.get_arg"], "pycg\\machinery\\pointers.NamePointer.get_arg": [], "pycg\\machinery\\pointers.NamePointer.get_args": [], "pycg\\machinery\\pointers.NamePointer.get_pos_args": [], "pycg\\machinery\\pointers.NamePointer.get_pos_of_name": [], "pycg\\machinery\\pointers.NamePointer.get_pos_names": [], "pycg\\machinery\\pointers.NamePointer.merge": ["<builtin>.super", "<builtin>.hasattr", "pycg\\machinery\\pointers.NamePointer.add_arg"], "pycg\\machinery\\scopes": [], "pycg\\machinery\\scopes.ScopeManager.__init__": [], "pycg\\machinery\\scopes.ScopeManager.handle_module": ["symtable.symtable", "pycg\\machinery\\scopes.ScopeManager.handle_module.process"], "pycg\\machinery\\scopes.ScopeManager.handle_module.process": ["pycg\\machinery\\scopes.ScopeManager.create_scope", "pycg.utils.join_ns", "pycg\\machinery\\scopes.ScopeManager.handle_module.process"], "pycg\\machinery\\scopes.ScopeManager.create_scope": ["pycg\\machinery\\scopes.ScopeItem.__init__"], "symtable.symtable": [], "pycg\\machinery\\scopes.ScopeManager.handle_assign": ["pycg\\machinery\\scopes.ScopeManager.get_scope"], "pycg\\machinery\\scopes.ScopeManager.get_scope": ["pycg\\machinery\\scopes.ScopeManager.get_scopes"], "pycg\\machinery\\scopes.ScopeManager.get_def": ["pycg\\machinery\\scopes.ScopeManager.get_scope"], "pycg\\machinery\\scopes.ScopeManager.get_scopes": [], "pycg\\machinery\\scopes.ScopeItem.__init__": ["<builtin>.isinstance"], "pycg\\machinery\\scopes.ScopeItem.get_ns": [], "pycg\\machinery\\scopes.ScopeItem.get_defs": [], "pycg\\machinery\\scopes.ScopeItem.get_def": ["pycg\\machinery\\scopes.ScopeItem.get_defs"], "pycg\\machinery\\scopes.ScopeItem.get_lambda_counter": [], "pycg\\machinery\\scopes.ScopeItem.get_dict_counter": [], "pycg\\machinery\\scopes.ScopeItem.get_list_counter": [], "pycg\\machinery\\scopes.ScopeItem.inc_lambda_counter": [], "pycg\\machinery\\scopes.ScopeItem.inc_dict_counter": [], "pycg\\machinery\\scopes.ScopeItem.inc_list_counter": [], "pycg\\machinery\\scopes.ScopeItem.reset_counters": [], "pycg\\machinery\\scopes.ScopeItem.add_def": [], "pycg\\machinery\\scopes.ScopeItem.merge_def": [], "pycg\\processing\\base": [], "pycg\\processing\\base.ProcessingBase.__init__": ["<builtin>.open", "os.path.abspath"], "pycg\\processing\\base.ProcessingBase.get_modules_analyzed": [], "pycg\\processing\\base.ProcessingBase.merge_modules_analyzed": [], "pycg\\processing\\base.ProcessingBase.current_ns": [], "pycg\\processing\\base.ProcessingBase.current_method": [], "pycg\\processing\\base.ProcessingBase.visit_Module": ["ast.NodeVisitor.scope_manager.get_scope.reset_counters", "ast.NodeVisitor.scope_manager.get_scope", "ast.NodeVisitor.generic_visit"], "ast.NodeVisitor.scope_manager.get_scope": [], "ast.NodeVisitor.scope_manager.get_scope.reset_counters": [], "ast.NodeVisitor.generic_visit": [], "pycg\\processing\\base.ProcessingBase.visit_FunctionDef": ["ast.NodeVisitor.scope_manager.get_scope.reset_counters", "ast.NodeVisitor.scope_manager.get_scope", "ast.NodeVisitor.visit"], "ast.NodeVisitor.visit": [], "pycg\\processing\\base.ProcessingBase.visit_Lambda": ["ast.NodeVisitor.visit", "pycg.utils.join_ns", "ast.NodeVisitor.scope_manager.get_scope", "ast.NodeVisitor.scope_manager.create_scope"], "ast.NodeVisitor.scope_manager.create_scope": [], "pycg\\processing\\base.ProcessingBase.visit_For": ["ast.NodeVisitor.visit"], "pycg\\processing\\base.ProcessingBase.visit_Dict": ["ast.NodeVisitor.scope_manager.get_scope.inc_dict_counter", "ast.NodeVisitor.scope_manager.get_scope", "pycg.utils.join_ns", "ast.NodeVisitor.visit", "pycg.utils.get_dict_name", "ast.NodeVisitor.scope_manager.get_scope.reset_counters", "<builtin>.zip"], "ast.NodeVisitor.scope_manager.get_scope.inc_dict_counter": [], "pycg.utils.get_dict_name": [], "pycg\\processing\\base.ProcessingBase.visit_List": ["ast.NodeVisitor.scope_manager.get_scope.inc_list_counter", "ast.NodeVisitor.scope_manager.get_scope", "pycg.utils.join_ns", "ast.NodeVisitor.visit", "pycg.utils.get_list_name", "ast.NodeVisitor.scope_manager.get_scope.reset_counters"], "ast.NodeVisitor.scope_manager.get_scope.inc_list_counter": [], "pycg.utils.get_list_name": [], "pycg\\processing\\base.ProcessingBase.visit_BinOp": ["ast.NodeVisitor.visit"], "pycg\\processing\\base.ProcessingBase.visit_ClassDef": ["ast.NodeVisitor.scope_manager.get_scope.reset_counters", "ast.NodeVisitor.scope_manager.get_scope", "ast.NodeVisitor.visit"], "pycg\\processing\\base.ProcessingBase.visit_Tuple": ["ast.NodeVisitor.visit"], "pycg\\processing\\base.ProcessingBase._handle_assign": ["ast.NodeVisitor.def_manager.create.get_lit_pointer.add", "ast.NodeVisitor.def_manager.create.get_name_pointer", "ast.NodeVisitor.def_manager.get", "ast.NodeVisitor.def_manager.get.get_name_pointer", "ast.NodeVisitor.def_manager.create", "ast.NodeVisitor.def_manager.get.get_name_pointer.add", "ast.NodeVisitor.def_manager.create.get_lit_pointer", "<builtin>.isinstance", "ast.NodeVisitor.def_manager.create.get_name_pointer.add", "ast.NodeVisitor.def_manager.get.get_lit_pointer.add", "<builtin>.iter", "ast.NodeVisitor.def_manager.get.get_lit_pointer"], "ast.NodeVisitor.def_manager.get": [], "ast.NodeVisitor.def_manager.create": [], "<builtin>.iter": [], "ast.NodeVisitor.def_manager.get.get_name_pointer": [], "ast.NodeVisitor.def_manager.create.get_name_pointer": [], "ast.NodeVisitor.def_manager.get.get_name_pointer.add": [], "ast.NodeVisitor.def_manager.create.get_name_pointer.add": [], "ast.NodeVisitor.def_manager.create.get_lit_pointer": [], "ast.NodeVisitor.def_manager.get.get_lit_pointer": [], "ast.NodeVisitor.def_manager.get.get_lit_pointer.add": [], "ast.NodeVisitor.def_manager.create.get_lit_pointer.add": [], "pycg\\processing\\base.ProcessingBase._visit_return": ["pycg\\processing\\base.ProcessingBase._handle_assign", "pycg\\processing\\base.ProcessingBase.decode_node", "pycg.utils.join_ns", "ast.NodeVisitor.visit"], "pycg\\processing\\base.ProcessingBase.decode_node": ["pycg.utils.get_lambda_name", "ast.NodeVisitor.scope_manager.get_scope", "pycg\\processing\\base.ProcessingBase._retrieve_attribute_names", "ast.NodeVisitor.def_manager.get", "pycg\\processing\\base.ProcessingBase.decode_node", "pycg.utils.join_ns", "ast.NodeVisitor.scope_manager.get_scope.get_dict_counter", "ast.NodeVisitor.scope_manager.get_def", "pycg\\processing\\base.ProcessingBase._is_literal", "<builtin>.isinstance", "pycg\\processing\\base.ProcessingBase.retrieve_subscript_names", "pycg.utils.get_dict_name", "pycg.utils.get_list_name", "ast.NodeVisitor.scope_manager.get_scope.get_lambda_counter", "ast.NodeVisitor.scope_manager.get_scope.get_list_counter"], "pycg\\processing\\base.ProcessingBase._get_target_ns": ["pycg\\processing\\base.ProcessingBase._retrieve_base_names", "<builtin>.isinstance", "pycg\\processing\\base.ProcessingBase.retrieve_subscript_names", "pycg.utils.join_ns"], "pycg\\processing\\base.ProcessingBase._retrieve_base_names": ["ast.NodeVisitor.class_manager.get.get_mro", "ast.NodeVisitor.class_manager.get", "pycg\\processing\\base.ProcessingBase.decode_node", "<builtin>.Exception", "ast.NodeVisitor.closured.get", "<builtin>.isinstance", "<builtin>.getattr", "<builtin>.set"], "pycg\\processing\\base.ProcessingBase.retrieve_subscript_names": ["ast.NodeVisitor.def_manager.get", "pycg\\processing\\base.ProcessingBase.decode_node", "<builtin>.str", "pycg.utils.join_ns", "<builtin>.Exception", "ast.NodeVisitor.closured.get", "pycg.utils.get_int_name", "pycg\\processing\\base.ProcessingBase._is_literal", "<builtin>.isinstance", "<builtin>.getattr", "<builtin>.set", "ast.NodeVisitor.def_manager.get.get_lit_pointer"], "pycg\\processing\\base.ProcessingBase._visit_assign": ["pycg\\processing\\base.ProcessingBase.decode_node", "pycg\\processing\\base.ProcessingBase._visit_assign.do_assign", "ast.NodeVisitor.visit"], "pycg\\processing\\base.ProcessingBase._visit_assign.do_assign": ["pycg\\processing\\base.ProcessingBase._handle_assign", "pycg\\processing\\base.ProcessingBase._get_target_ns", "<builtin>.enumerate", "ast.NodeVisitor.visit", "<builtin>.isinstance", "<builtin>.len", "ast.NodeVisitor.scope_manager.handle_assign", "pycg\\processing\\base.ProcessingBase._visit_assign.do_assign"], "ast.NodeVisitor.scope_manager.handle_assign": [], "ast.NodeVisitor.scope_manager.get_def": [], "ast.NodeVisitor.scope_manager.get_scope.get_lambda_counter": [], "pycg.utils.get_lambda_name": [], "pycg\\processing\\base.ProcessingBase._retrieve_attribute_names": ["ast.NodeVisitor.def_manager.get", "ast.NodeVisitor.def_manager.get.get_type", "pycg.utils.join_ns", "ast.NodeVisitor.def_manager.create", "ast.NodeVisitor.closured.get", "<builtin>.getattr", "pycg\\processing\\base.ProcessingBase._retrieve_parent_names", "<builtin>.set", "ast.NodeVisitor.def_manager.get.get_ns", "pycg\\processing\\base.ProcessingBase.find_cls_fun_ns"], "pycg\\processing\\base.ProcessingBase._is_literal": ["<builtin>.isinstance"], "ast.NodeVisitor.scope_manager.get_scope.get_dict_counter": [], "ast.NodeVisitor.scope_manager.get_scope.get_list_counter": [], "ast.NodeVisitor.closured.get": [], "ast.NodeVisitor.class_manager.get": [], "ast.NodeVisitor.class_manager.get.get_mro": [], "pycg\\processing\\base.ProcessingBase._retrieve_parent_names": ["pycg\\processing\\base.ProcessingBase.decode_node", "<builtin>.Exception", "ast.NodeVisitor.closured.get", "<builtin>.isinstance", "<builtin>.getattr", "<builtin>.set"], "ast.NodeVisitor.def_manager.get.get_type": [], "ast.NodeVisitor.def_manager.get.get_ns": [], "pycg\\processing\\base.ProcessingBase.find_cls_fun_ns": ["ast.NodeVisitor.class_manager.get.get_mro", "pycg\\processing\\base.ProcessingBase.add_ext_mod_node", "ast.NodeVisitor.class_manager.get", "ast.NodeVisitor.def_manager.get", "ast.NodeVisitor.def_manager.get.get_type", "pycg.utils.join_ns", "ast.NodeVisitor.def_manager.create", "ast.NodeVisitor.closured.get", "<builtin>.getattr", "<builtin>.set"], "pycg\\processing\\base.ProcessingBase.iterate_call_args": ["ast.NodeVisitor.def_manager.get", "pycg\\processing\\base.ProcessingBase.decode_node", "ast.NodeVisitor.def_manager.get.get_name_pointer", "<builtin>.enumerate", "ast.NodeVisitor.def_manager.get.get_name_pointer.add", "ast.NodeVisitor.visit", "<builtin>.isinstance", "ast.NodeVisitor.def_manager.get.get_lit_pointer.add", "ast.NodeVisitor.def_manager.get.get_lit_pointer"], "pycg.utils.get_int_name": [], "pycg\\processing\\base.ProcessingBase.retrieve_call_names": ["pycg\\processing\\base.ProcessingBase._retrieve_attribute_names", "ast.NodeVisitor.def_manager.get", "pycg.utils.join_ns", "ast.NodeVisitor.scope_manager.get_def", "ast.NodeVisitor.scope_manager.get_def.get_ns", "ast.NodeVisitor.closured.get", "<builtin>.isinstance", "pycg\\processing\\base.ProcessingBase.retrieve_subscript_names", "ast.NodeVisitor.def_manager.get.get_ns", "<builtin>.set", "ast.NodeVisitor.closured.get.add"], "ast.NodeVisitor.scope_manager.get_def.get_ns": [], "ast.NodeVisitor.closured.get.add": [], "pycg\\processing\\base.ProcessingBase.analyze_submodules": ["pycg\\processing\\base.ProcessingBase.analyze_submodule", "ast.NodeVisitor.import_manager.get_imports"], "ast.NodeVisitor.import_manager.get_imports": [], "pycg\\processing\\base.ProcessingBase.analyze_submodule": ["ast.NodeVisitor.import_manager.set_current_mod", "pycg\\processing\\base.ProcessingBase.merge_modules_analyzed", "pycg\\processing\\base.ProcessingBase.get_modules_analyzed", "ast.NodeVisitor.import_manager.get_mod_dir", "ast.NodeVisitor.import_manager.get_filepath.endswith", "ast.NodeVisitor.import_manager.get_filepath"], "ast.NodeVisitor.import_manager.get_filepath": [], "ast.NodeVisitor.import_manager.get_filepath.endswith": [], "ast.NodeVisitor.import_manager.get_mod_dir": [], "ast.NodeVisitor.import_manager.set_current_mod": [], "pycg\\processing\\base.ProcessingBase.add_ext_mod_node": ["ast.NodeVisitor.module_manager.get", "ast.NodeVisitor.module_manager.create.add_method", "ast.NodeVisitor.module_manager.get.add_method", "ast.NodeVisitor.module_manager.create"], "ast.NodeVisitor.module_manager.get": [], "ast.NodeVisitor.module_manager.create": [], "ast.NodeVisitor.module_manager.create.add_method": [], "ast.NodeVisitor.module_manager.get.add_method": [], "pycg\\processing\\cgprocessor": [], "pycg\\processing\\cgprocessor.CallGraphProcessor.__init__": ["<builtin>.super", "os.path.dirname"], "pycg\\processing\\cgprocessor.CallGraphProcessor.visit_Module": ["<builtin>.super"], "pycg\\processing\\cgprocessor.CallGraphProcessor.visit_For": ["<builtin>.super", "pycg.processing.base.ProcessingBase.visit", "pycg.utils.join_ns", "pycg.processing.base.ProcessingBase.decode_node.get_ns", "<builtin>.isinstance", "pycg.processing.base.ProcessingBase.decode_node"], "pycg.processing.base.ProcessingBase.visit": [], "pycg.processing.base.ProcessingBase.decode_node": [], "pycg.processing.base.ProcessingBase.decode_node.get_ns": [], "pycg\\processing\\cgprocessor.CallGraphProcessor.visit_Lambda": ["<builtin>.super", "pycg.utils.get_lambda_name", "pycg.utils.join_ns"], "pycg\\processing\\cgprocessor.CallGraphProcessor.visit_Raise": ["pycg.processing.base.ProcessingBase.visit", "pycg.processing.base.ProcessingBase.find_cls_fun_ns", "pycg.processing.base.ProcessingBase.decode_node.get_ns", "<builtin>.isinstance", "pycg.processing.base.ProcessingBase.decode_node"], "pycg.processing.base.ProcessingBase.find_cls_fun_ns": [], "pycg\\processing\\cgprocessor.CallGraphProcessor.visit_AsyncFunctionDef": ["pycg\\processing\\cgprocessor.CallGraphProcessor.visit_FunctionDef"], "pycg\\processing\\cgprocessor.CallGraphProcessor.visit_FunctionDef": ["<builtin>.super", "pycg.processing.base.ProcessingBase.visit", "pycg.utils.join_ns", "pycg.processing.base.ProcessingBase.decode_node.get_ns", "<builtin>.isinstance", "pycg.processing.base.ProcessingBase.decode_node"], "pycg\\processing\\cgprocessor.CallGraphProcessor.visit_Call": ["pycg.processing.base.ProcessingBase.visit", "pycg.processing.base.ProcessingBase.retrieve_call_names", "pycg\\processing\\cgprocessor.CallGraphProcessor.has_ext_parent", "pycg.utils.join_ns", "pycg.processing.base.ProcessingBase.find_cls_fun_ns", "<builtin>.isinstance", "<builtin>.getattr", "pycg\\processing\\cgprocessor.CallGraphProcessor.visit_Call.create_ext_edge", "pycg\\processing\\cgprocessor.CallGraphProcessor.is_builtin", "pycg\\processing\\cgprocessor.CallGraphProcessor.get_full_attr_names", "pycg.utils.join_ns.split", "pycg.processing.base.ProcessingBase.retrieve_call_names.split"], "pycg\\processing\\cgprocessor.CallGraphProcessor.visit_Call.create_ext_edge": ["pycg.processing.base.ProcessingBase.add_ext_mod_node"], "pycg.processing.base.ProcessingBase.add_ext_mod_node": [], "pycg.processing.base.ProcessingBase.retrieve_call_names": [], "pycg\\processing\\cgprocessor.CallGraphProcessor.has_ext_parent": ["<builtin>.isinstance", "pycg.processing.base.ProcessingBase._retrieve_parent_names"], "pycg\\processing\\cgprocessor.CallGraphProcessor.get_full_attr_names": ["<builtin>.isinstance", "<builtin>.getattr"], "pycg\\processing\\cgprocessor.CallGraphProcessor.is_builtin": [], "pycg.processing.base.ProcessingBase.retrieve_call_names.split": [], "pycg\\processing\\cgprocessor.CallGraphProcessor.analyze_submodules": ["<builtin>.super", "pycg.processing.base.ProcessingBase.get_modules_analyzed"], "pycg.processing.base.ProcessingBase.get_modules_analyzed": [], "pycg\\processing\\cgprocessor.CallGraphProcessor.analyze": ["ast.parse", "pycg.processing.base.ProcessingBase.visit", "pycg\\processing\\cgprocessor.CallGraphProcessor.analyze_submodules"], "ast.parse": [], "pycg\\processing\\cgprocessor.CallGraphProcessor.get_all_reachable_functions": ["<builtin>.set"], "pycg.processing.base.ProcessingBase._retrieve_parent_names": [], "pycg\\processing\\keyerrprocessor": [], "pycg\\processing\\keyerrprocessor.KeyErrProcessor.__init__": ["<builtin>.super", "os.path.dirname"], "pycg\\processing\\keyerrprocessor.KeyErrProcessor.visit_Subscript": ["pycg.processing.base.ProcessingBase.visit", "os.path.relpath", "pycg.processing.base.ProcessingBase.retrieve_subscript_names.split", "pycg.processing.base.ProcessingBase.retrieve_subscript_names", "pycg\\processing\\keyerrprocessor.KeyErrProcessor.is_subscriptable"], "pycg.processing.base.ProcessingBase.retrieve_subscript_names": [], "pycg\\processing\\keyerrprocessor.KeyErrProcessor.is_subscriptable": ["re.match"], "pycg.processing.base.ProcessingBase.retrieve_subscript_names.split": [], "re.match": [], "pycg\\processing\\keyerrprocessor.KeyErrProcessor.analyze_submodules": ["<builtin>.super", "pycg.processing.base.ProcessingBase.get_modules_analyzed"], "pycg\\processing\\keyerrprocessor.KeyErrProcessor.analyze": ["ast.parse", "pycg\\processing\\keyerrprocessor.KeyErrProcessor.analyze_submodules", "pycg.processing.base.ProcessingBase.visit"], "pycg\\processing\\keyerrprocessor.KeyErrProcessor.visit_Lambda": ["<builtin>.super", "pycg.utils.get_lambda_name", "pycg.utils.join_ns"], "pycg\\processing\\postprocessor": [], "pycg\\processing\\postprocessor.PostProcessor.__init__": ["<builtin>.super"], "pycg\\processing\\postprocessor.PostProcessor.visit_Lambda": ["<builtin>.super", "pycg.utils.get_lambda_name"], "pycg\\processing\\postprocessor.PostProcessor.visit_Call": ["pycg.processing.base.ProcessingBase.visit", "pycg\\processing\\postprocessor.PostProcessor.update_parent_classes", "pycg.processing.base.ProcessingBase.retrieve_call_names", "pycg.utils.join_ns", "pycg.processing.base.ProcessingBase.iterate_call_args"], "pycg\\processing\\postprocessor.PostProcessor.update_parent_classes": ["pycg.processing.base.ProcessingBase.find_cls_fun_ns", "pycg.utils.join_ns", "<builtin>.list"], "pycg.processing.base.ProcessingBase.iterate_call_args": [], "pycg\\processing\\postprocessor.PostProcessor.visit_Assign": ["pycg.processing.base.ProcessingBase._visit_assign"], "pycg.processing.base.ProcessingBase._visit_assign": [], "pycg\\processing\\postprocessor.PostProcessor.visit_For": ["<builtin>.super", "pycg.utils.join_ns", "pycg.processing.base.ProcessingBase.decode_node.get_ns", "<builtin>.isinstance", "pycg.processing.base.ProcessingBase.decode_node"], "pycg\\processing\\postprocessor.PostProcessor.visit_Return": ["pycg.processing.base.ProcessingBase._visit_return"], "pycg.processing.base.ProcessingBase._visit_return": [], "pycg\\processing\\postprocessor.PostProcessor.visit_Yield": ["pycg.processing.base.ProcessingBase._visit_return"], "pycg\\processing\\postprocessor.PostProcessor.visit_AsyncFunctionDef": ["pycg\\processing\\postprocessor.PostProcessor.visit_FunctionDef"], "pycg\\processing\\postprocessor.PostProcessor.visit_FunctionDef": ["<builtin>.super", "<builtin>.list", "pycg.utils.join_ns", "pycg.processing.base.ProcessingBase.decode_node.get_ns", "<builtin>.reversed", "<builtin>.isinstance", "<builtin>.set", "pycg.processing.base.ProcessingBase.decode_node.get_name_pointer.get_pos_arg", "<builtin>.hasattr", "pycg.processing.base.ProcessingBase.decode_node", "pycg.processing.base.ProcessingBase.decode_node.get_name_pointer"], "<builtin>.reversed": [], "pycg.processing.base.ProcessingBase.decode_node.get_name_pointer": [], "pycg.processing.base.ProcessingBase.decode_node.get_name_pointer.get_pos_arg": [], "pycg\\processing\\postprocessor.PostProcessor.visit_ClassDef": ["<builtin>.super", "pycg.processing.base.ProcessingBase.visit", "pycg.processing.base.ProcessingBase.decode_node.get_ns", "<builtin>.isinstance", "<builtin>.set", "pycg.processing.base.ProcessingBase.decode_node", "pycg.processing.base.ProcessingBase.decode_node.get_name_pointer"], "pycg\\processing\\postprocessor.PostProcessor.visit_List": ["pycg.processing.base.ProcessingBase.visit", "pycg.utils.join_ns", "pycg.processing.base.ProcessingBase.decode_node.get_ns", "<builtin>.enumerate", "pycg.utils.get_int_name", "<builtin>.isinstance", "pycg.processing.base.ProcessingBase.name_stack.append", "pycg.utils.get_list_name", "pycg.processing.base.ProcessingBase.name_stack.pop", "pycg.processing.base.ProcessingBase.decode_node"], "pycg.processing.base.ProcessingBase.name_stack.append": [], "pycg.processing.base.ProcessingBase.name_stack.pop": [], "pycg\\processing\\postprocessor.PostProcessor.visit_Dict": ["pycg.processing.base.ProcessingBase.visit", "<builtin>.str", "pycg.utils.join_ns", "pycg.processing.base.ProcessingBase.decode_node.get_ns", "pycg.utils.get_int_name", "<builtin>.isinstance", "pycg.processing.base.ProcessingBase.decode_node.get_lit_pointer", "pycg.utils.get_dict_name", "pycg.processing.base.ProcessingBase.name_stack.append", "<builtin>.set", "pycg.processing.base.ProcessingBase.name_stack.pop", "pycg.processing.base.ProcessingBase.decode_node", "<builtin>.zip"], "pycg.processing.base.ProcessingBase.decode_node.get_lit_pointer": [], "pycg\\processing\\postprocessor.PostProcessor.analyze_submodules": ["<builtin>.super", "pycg.processing.base.ProcessingBase.get_modules_analyzed"], "pycg\\processing\\postprocessor.PostProcessor.analyze": ["ast.parse", "pycg.processing.base.ProcessingBase.visit", "pycg\\processing\\postprocessor.PostProcessor.analyze_submodules"], "pycg\\processing\\preprocessor": [], "pycg\\processing\\preprocessor.PreProcessor.__init__": ["<builtin>.super", "pycg.processing.base.ProcessingBase.filename.split"], "pycg.processing.base.ProcessingBase.filename.split": [], "pycg\\processing\\preprocessor.PreProcessor._get_fun_defaults": ["pycg.processing.base.ProcessingBase.visit", "<builtin>.len", "pycg.processing.base.ProcessingBase.decode_node", "<builtin>.enumerate"], "pycg\\processing\\preprocessor.PreProcessor.analyze_submodule": ["<builtin>.super", "pycg.processing.base.ProcessingBase.get_modules_analyzed"], "pycg\\processing\\preprocessor.PreProcessor.visit_Module": ["<builtin>.super", "pycg.processing.base.ProcessingBase.contents.splitlines", "pycg\\processing\\preprocessor.PreProcessor.visit_Module.iterate_mod_items", "<builtin>.len"], "pycg\\processing\\preprocessor.PreProcessor.visit_Module.iterate_mod_items": [], "pycg.processing.base.ProcessingBase.contents.splitlines": [], "pycg\\processing\\preprocessor.PreProcessor.visit_Import": ["pycg\\processing\\preprocessor.PreProcessor.visit_Import.handle_scopes", "pycg\\processing\\preprocessor.PreProcessor.visit_Import.handle_src_name", "pycg\\processing\\preprocessor.PreProcessor.analyze_submodule", "pycg\\processing\\preprocessor.PreProcessor.visit_Import.add_external_def"], "pycg\\processing\\preprocessor.PreProcessor.visit_Import.handle_src_name": [], "pycg\\processing\\preprocessor.PreProcessor.visit_Import.handle_scopes": ["pycg\\processing\\preprocessor.PreProcessor.visit_Import.handle_scopes.create_def"], "pycg\\processing\\preprocessor.PreProcessor.visit_Import.handle_scopes.create_def": ["pycg.utils.join_ns"], "pycg\\processing\\preprocessor.PreProcessor.visit_Import.add_external_def": ["pycg.utils.join_ns", "<builtin>.len"], "pycg\\processing\\preprocessor.PreProcessor.visit_ImportFrom": ["pycg\\processing\\preprocessor.PreProcessor.visit_Import"], "pycg\\processing\\preprocessor.PreProcessor._get_last_line": ["<builtin>.sorted", "<builtin>.getattr", "ast.walk", "<builtin>.list"], "ast.walk": [], "pycg\\processing\\preprocessor.PreProcessor._get_last_line.<lambda1>": ["<builtin>.hasattr"], "pycg\\processing\\preprocessor.PreProcessor._handle_function_def": ["pycg.utils.join_ns", "<builtin>.enumerate", "<builtin>.isinstance", "pycg\\processing\\preprocessor.PreProcessor._get_last_line", "pycg\\processing\\preprocessor.PreProcessor._get_fun_defaults", "<builtin>.hasattr", "pycg.utils.join_ns.split"], "pycg\\processing\\preprocessor.PreProcessor.visit_AsyncFunctionDef": ["pycg\\processing\\preprocessor.PreProcessor.visit_FunctionDef"], "pycg\\processing\\preprocessor.PreProcessor.visit_FunctionDef": ["<builtin>.super", "pycg\\processing\\preprocessor.PreProcessor._handle_function_def"], "pycg\\processing\\preprocessor.PreProcessor.visit_For": ["<builtin>.super", "<builtin>.isinstance", "pycg.utils.join_ns"], "pycg\\processing\\preprocessor.PreProcessor.visit_Assign": ["pycg.processing.base.ProcessingBase._visit_assign"], "pycg\\processing\\preprocessor.PreProcessor.visit_Return": ["pycg.processing.base.ProcessingBase._visit_return"], "pycg\\processing\\preprocessor.PreProcessor.visit_Yield": ["pycg.processing.base.ProcessingBase._visit_return"], "pycg\\processing\\preprocessor.PreProcessor.visit_Call": ["<builtin>.isinstance", "pycg.processing.base.ProcessingBase.visit", "pycg.utils.join_ns", "pycg.processing.base.ProcessingBase.iterate_call_args"], "pycg\\processing\\preprocessor.PreProcessor.visit_Lambda": ["<builtin>.super", "pycg.utils.get_lambda_name", "pycg.utils.join_ns", "pycg\\processing\\preprocessor.PreProcessor._handle_function_def"], "pycg\\processing\\preprocessor.PreProcessor.visit_ClassDef": ["<builtin>.super", "pycg\\processing\\preprocessor.PreProcessor._get_last_line"], "pycg\\processing\\preprocessor.PreProcessor.analyze": ["ast.parse", "pycg.processing.base.ProcessingBase.visit"], "pycg\\pycg": [], "pycg\\pycg.CallGraphGenerator.__init__": ["pycg\\pycg.CallGraphGenerator.setUp"], "pycg\\pycg.CallGraphGenerator.setUp": ["pycg.machinery.classes.ClassManager", "pycg.machinery.callgraph.CallGraph", "pycg.machinery.key_err.KeyErrors", "pycg.machinery.imports.ImportManager", "pycg.machinery.scopes.ScopeManager", "pycg.machinery.modules.ModuleManager", "pycg.machinery.definitions.DefinitionManager"], "pycg.machinery.imports.ImportManager": [], "pycg.machinery.scopes.ScopeManager": [], "pycg.machinery.definitions.DefinitionManager": [], "pycg.machinery.classes.ClassManager": [], "pycg.machinery.modules.ModuleManager": [], "pycg.machinery.callgraph.CallGraph": [], "pycg.machinery.key_err.KeyErrors": [], "pycg\\pycg.CallGraphGenerator.extract_state": ["pycg.machinery.scopes.ScopeManager.get_scopes", "pycg.machinery.definitions.DefinitionManager.get_defs.items", "pycg.machinery.classes.ClassManager.get_classes", "<builtin>.set", "pycg.machinery.definitions.DefinitionManager.get_defs"], "pycg.machinery.definitions.DefinitionManager.get_defs": [], "pycg.machinery.definitions.DefinitionManager.get_defs.items": [], "pycg.machinery.scopes.ScopeManager.get_scopes": [], "pycg.machinery.classes.ClassManager.get_classes": [], "pycg\\pycg.CallGraphGenerator.reset_counters": ["pycg.machinery.scopes.ScopeManager.get_scopes"], "pycg\\pycg.CallGraphGenerator.has_converged": ["pycg\\pycg.CallGraphGenerator.extract_state"], "pycg\\pycg.CallGraphGenerator.remove_import_hooks": ["pycg.machinery.imports.ImportManager.remove_hooks"], "pycg.machinery.imports.ImportManager.remove_hooks": [], "pycg\\pycg.CallGraphGenerator.tearDown": ["pycg\\pycg.CallGraphGenerator.remove_import_hooks"], "pycg\\pycg.CallGraphGenerator._get_mod_name": ["pycg.utils.to_mod_name", "pycg.utils.to_mod_name.endswith", "os.path.relpath", "pycg.utils.to_mod_name.split"], "pycg.utils.to_mod_name.endswith": [], "pycg.utils.to_mod_name.split": [], "pycg\\pycg.CallGraphGenerator.do_pass": ["pycg\\pycg.CallGraphGenerator.remove_import_hooks", "os.path.abspath", "pycg.machinery.imports.ImportManager.install_hooks", "pycg.machinery.imports.ImportManager.set_pkg", "pycg\\pycg.CallGraphGenerator._get_mod_name", "pycg.processing.cgprocessor.CallGraphProcessor", "os.path.dirname", "pycg.processing.preprocessor.PreProcessor", "<builtin>.set", "pycg.processing.postprocessor.PostProcessor", "pycg.processing.keyerrprocessor.KeyErrProcessor"], "pycg.machinery.imports.ImportManager.set_pkg": [], "pycg.machinery.imports.ImportManager.install_hooks": [], "pycg.processing.postprocessor.PostProcessor": [], "pycg.processing.preprocessor.PreProcessor": [], "pycg.processing.cgprocessor.CallGraphProcessor": [], "pycg.processing.keyerrprocessor.KeyErrProcessor": [], "pycg\\pycg.CallGraphGenerator.analyze": ["pycg.machinery.definitions.DefinitionManager.complete_definitions", "pycg\\pycg.CallGraphGenerator.do_pass", "<builtin>.Exception", "pycg\\pycg.CallGraphGenerator.reset_counters", "pycg\\pycg.CallGraphGenerator.extract_state", "pycg\\pycg.CallGraphGenerator.has_converged"], "pycg.machinery.definitions.DefinitionManager.complete_definitions": [], "pycg\\pycg.CallGraphGenerator.output": ["pycg.machinery.callgraph.CallGraph.get"], "pycg.machinery.callgraph.CallGraph.get": [], "pycg\\pycg.CallGraphGenerator.output_key_errs": ["pycg.machinery.key_err.KeyErrors.get"], "pycg.machinery.key_err.KeyErrors.get": [], "pycg\\pycg.CallGraphGenerator.output_edges": ["pycg.machinery.callgraph.CallGraph.get_edges"], "pycg.machinery.callgraph.CallGraph.get_edges": [], "pycg\\pycg.CallGraphGenerator._generate_mods": ["pycg.machinery.modules.ModuleManager.get_internal_modules.items", "os.path.relpath", "pycg.machinery.modules.ModuleManager.get_external_modules.items"], "pycg.machinery.modules.ModuleManager.get_internal_modules.items": [], "pycg.machinery.modules.ModuleManager.get_external_modules.items": [], "pycg\\pycg.CallGraphGenerator.output_internal_mods": ["pycg.machinery.modules.ModuleManager.get_internal_modules", "pycg\\pycg.CallGraphGenerator._generate_mods"], "pycg.machinery.modules.ModuleManager.get_internal_modules": [], "pycg\\pycg.CallGraphGenerator.output_external_mods": ["pycg.machinery.modules.ModuleManager.get_external_modules", "pycg\\pycg.CallGraphGenerator._generate_mods"], "pycg.machinery.modules.ModuleManager.get_external_modules": [], "pycg\\pycg.CallGraphGenerator.output_functions": ["pycg.machinery.definitions.DefinitionManager.get_defs.items", "pycg.machinery.definitions.DefinitionManager.get_defs"], "pycg\\pycg.CallGraphGenerator.output_classes": ["pycg.machinery.classes.ClassManager.get_classes"], "pycg\\pycg.CallGraphGenerator.get_as_graph": ["pycg.machinery.definitions.DefinitionManager.get_defs.items", "pycg.machinery.definitions.DefinitionManager.get_defs"], "pycg\\tests\\base": [], "pycg\\tests\\callgraph_test": [], "pycg\\tests\\callgraph_test.CallGraphTest.setUp": ["pycg.machinery.callgraph.CallGraph"], "pycg\\tests\\callgraph_test.CallGraphTest.tearDown": [], "pycg\\tests\\callgraph_test.CallGraphTest.test_setup": ["pycg.machinery.callgraph.CallGraph.get", "base.TestBase.assertEqual"], "base.TestBase.assertEqual": [], "pycg\\tests\\callgraph_test.CallGraphTest.test_add_node": ["base.TestBase.assertRaises", "base.TestBase.assertEqual", "pycg.machinery.callgraph.CallGraph.add_node", "pycg.machinery.callgraph.CallGraph.get", "<builtin>.set", "pycg.machinery.callgraph.CallGraph.get.items"], "pycg.machinery.callgraph.CallGraph.add_node": [], "pycg.machinery.callgraph.CallGraph.get.items": [], "base.TestBase.assertRaises": [], "pycg\\tests\\callgraph_test.CallGraphTest.test_add_edge": ["base.TestBase.assertRaises", "base.TestBase.assertEqual", "pycg.machinery.callgraph.CallGraph.add_edge", "pycg.machinery.callgraph.CallGraph.get", "<builtin>.set", "pycg.machinery.callgraph.CallGraph.get.items"], "pycg.machinery.callgraph.CallGraph.add_edge": [], "pycg\\tests\\definitions_test": [], "pycg\\tests\\definitions_test.DefinitionManagerTest.test_create": ["pycg.machinery.definitions.DefinitionManager.create", "base.TestBase.assertRaises", "pycg.machinery.definitions.DefinitionManager.get", "pycg.machinery.definitions.DefinitionManager.get.get_type", "base.TestBase.assertEqual", "pycg.machinery.definitions.DefinitionManager.get.get_ns", "pycg.machinery.definitions.DefinitionManager"], "pycg.machinery.definitions.DefinitionManager.create": [], "pycg.machinery.definitions.DefinitionManager.get": [], "pycg.machinery.definitions.DefinitionManager.get.get_type": [], "pycg.machinery.definitions.DefinitionManager.get.get_ns": [], "pycg\\tests\\definitions_test.DefinitionManagerTest.test_assign": ["pycg.machinery.definitions.DefinitionManager.create", "pycg.machinery.definitions.DefinitionManager.assign.get_type", "pycg.machinery.definitions.DefinitionManager.get", "base.TestBase.assertIsNotNone", "base.TestBase.assertEqual", "pycg.machinery.definitions.DefinitionManager.assign", "pycg.machinery.definitions.DefinitionManager.assign.get_name_pointer", "pycg.machinery.definitions.DefinitionManager.assign.get_ns", "pycg.machinery.definitions.DefinitionManager.create.get_name_pointer.add", "pycg.machinery.definitions.DefinitionManager.create.get_name_pointer", "<builtin>.set", "pycg.machinery.definitions.DefinitionManager.assign.get_name_pointer.get_arg", "pycg.machinery.definitions.DefinitionManager.get.get_name_pointer", "pycg.machinery.definitions.DefinitionManager.create.get_name_pointer.add_arg", "pycg.machinery.definitions.DefinitionManager"], "pycg.machinery.definitions.DefinitionManager.create.get_name_pointer": [], "pycg.machinery.definitions.DefinitionManager.create.get_name_pointer.add": [], "pycg.machinery.definitions.DefinitionManager.create.get_name_pointer.add_arg": [], "pycg.machinery.definitions.DefinitionManager.assign": [], "pycg.machinery.definitions.DefinitionManager.assign.get_ns": [], "pycg.machinery.definitions.DefinitionManager.assign.get_type": [], "pycg.machinery.definitions.DefinitionManager.assign.get_name_pointer": [], "pycg.machinery.definitions.DefinitionManager.assign.get_name_pointer.get_arg": [], "base.TestBase.assertIsNotNone": [], "pycg.machinery.definitions.DefinitionManager.get.get_name_pointer": [], "pycg\\tests\\definitions_test.DefinitionManagerTest.test_handle_function_def": ["pycg.machinery.definitions.DefinitionManager.create", "pycg.machinery.definitions.DefinitionManager.handle_function_def", "pycg.machinery.definitions.DefinitionManager.get", "base.TestBase.assertIsNotNone", "pycg.machinery.definitions.DefinitionManager"], "pycg.machinery.definitions.DefinitionManager.handle_function_def": [], "pycg\\tests\\fasten_format_test": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.setUp": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.setUp.CGGenerator.output_internal_mods": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.setUp.CGGenerator.output_external_mods": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.setUp.CGGenerator.output_classes": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.setUp.CGGenerator.output_edges": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.setUp.CGGenerator.output_functions": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.get_formatter": ["pycg.formats.fasten.Fasten"], "pycg.formats.fasten.Fasten": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.test_cli_args": ["pycg.formats.fasten.Fasten.generate", "pycg\\tests\\fasten_format_test.FastenFormatTest.get_formatter", "base.TestBase.assertEqual"], "pycg.formats.fasten.Fasten.generate": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.test_uri": ["base.TestBase.assertRaises", "pycg\\tests\\fasten_format_test.FastenFormatTest.get_formatter", "base.TestBase.assertEqual", "pycg.utils.join_ns", "pycg.formats.fasten.Fasten.to_external_uri", "pycg.formats.fasten.Fasten.to_uri"], "pycg.formats.fasten.Fasten.to_uri": [], "pycg.formats.fasten.Fasten.to_external_uri": [], "pycg\\tests\\fasten_format_test.FastenFormatTest._get_internal_mods": [], "pycg\\tests\\fasten_format_test.FastenFormatTest._get_external_mods": [], "pycg\\tests\\fasten_format_test.FastenFormatTest._get_classes": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.test_internal_modules": ["<builtin>.dict", "pycg\\tests\\fasten_format_test.FastenFormatTest.get_formatter", "base.TestBase.assertEqual", "pycg\\tests\\fasten_format_test.FastenFormatTest._get_internal_mods", "<builtin>.sorted", "pycg.formats.fasten.Fasten.generate", "<builtin>.len", "<builtin>.set", "pycg.formats.fasten.Fasten.to_uri"], "pycg\\tests\\fasten_format_test.FastenFormatTest.test_internal_modules.<lambda1>": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.test_internal_modules.<lambda2>": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.test_external_modules": ["<builtin>.dict", "pycg\\tests\\fasten_format_test.FastenFormatTest.get_formatter", "base.TestBase.assertEqual", "<builtin>.sorted", "pycg.formats.fasten.Fasten.to_external_uri", "pycg\\tests\\fasten_format_test.FastenFormatTest._get_external_mods", "pycg.formats.fasten.Fasten.generate", "<builtin>.len", "<builtin>.set"], "pycg\\tests\\fasten_format_test.FastenFormatTest.test_external_modules.<lambda1>": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.test_external_modules.<lambda2>": [], "pycg\\tests\\fasten_format_test.FastenFormatTest.test_hiearchy": ["pycg\\tests\\fasten_format_test.FastenFormatTest.get_formatter", "base.TestBase.assertEqual", "pycg\\tests\\fasten_format_test.FastenFormatTest._get_internal_mods", "pycg.formats.fasten.Fasten.to_external_uri", "pycg.formats.fasten.Fasten.generate", "<builtin>.len", "pycg\\tests\\fasten_format_test.FastenFormatTest._get_classes", "pycg.formats.fasten.Fasten.to_uri"], "pycg\\tests\\imports_test": [], "pycg\\tests\\imports_test.ImportsTest.test_create_node": ["base.TestBase.assertRaises", "pycg.machinery.imports.ImportManager.get_imports", "pycg.machinery.imports.ImportManager.create_node", "base.TestBase.assertEqual", "pycg.machinery.imports.ImportManager.set_pkg", "pycg.machinery.imports.ImportManager", "pycg.machinery.imports.ImportManager.get_filepath", "<builtin>.set"], "pycg.machinery.imports.ImportManager.create_node": [], "pycg.machinery.imports.ImportManager.get_filepath": [], "pycg.machinery.imports.ImportManager.get_imports": [], "pycg\\tests\\imports_test.ImportsTest.test_set_filepath": ["base.TestBase.assertRaises", "pycg.machinery.imports.ImportManager.create_node", "os.path.abspath", "base.TestBase.assertEqual", "pycg.machinery.imports.ImportManager.set_pkg", "pycg.machinery.imports.ImportManager", "pycg.machinery.imports.ImportManager.get_filepath", "pycg.machinery.imports.ImportManager.set_filepath"], "pycg.machinery.imports.ImportManager.set_filepath": [], "pycg\\tests\\imports_test.ImportsTest.test_create_edge": ["base.TestBase.assertRaises", "pycg.machinery.imports.ImportManager.get_imports", "pycg.machinery.imports.ImportManager.create_node", "base.TestBase.assertEqual", "pycg.machinery.imports.ImportManager.set_pkg", "pycg.machinery.imports.ImportManager.create_edge", "pycg.machinery.imports.ImportManager", "pycg.machinery.imports.ImportManager.set_current_mod", "<builtin>.set"], "pycg.machinery.imports.ImportManager.create_edge": [], "pycg.machinery.imports.ImportManager.set_current_mod": [], "pycg\\tests\\imports_test.ImportsTest.test_hooks": ["pycg.machinery.imports.ImportManager.remove_hooks", "pycg.machinery.imports.ImportManager.install_hooks", "mock.patch", "base.TestBase.assertEqual", "pycg.machinery.imports.ImportManager.set_pkg", "os.path.abspath", "os.path.dirname", "copy.deepcopy", "pycg.machinery.imports.ImportManager"], "mock.patch": [], "pycg\\tests\\imports_test.ImportsTest.test_custom_loader": ["pycg.machinery.imports.ImportManager.get_imports", "pycg.machinery.imports.ImportManager.create_node", "os.path.abspath", "base.TestBase.assertEqual", "pycg.machinery.imports.ImportManager.set_pkg", "pycg.machinery.imports.get_custom_loader.get_data", "pycg.machinery.imports.get_custom_loader.get_filename", "copy.deepcopy", "pycg.machinery.imports.ImportManager", "pycg.machinery.imports.ImportManager.set_current_mod", "<builtin>.set", "pycg.machinery.imports.ImportManager.get_filepath", "pycg.machinery.imports.get_custom_loader"], "pycg.machinery.imports.get_custom_loader": [], "pycg.machinery.imports.get_custom_loader.get_filename": [], "pycg.machinery.imports.get_custom_loader.get_data": [], "pycg\\tests\\imports_test.ImportsTest.test_handle_import_level": ["base.TestBase.assertRaises", "base.TestBase.assertEqual", "pycg.machinery.imports.ImportManager.set_pkg", "pycg.machinery.imports.ImportManager._handle_import_level", "pycg.machinery.imports.ImportManager", "pycg.machinery.imports.ImportManager.set_current_mod"], "pycg.machinery.imports.ImportManager._handle_import_level": [], "pycg\\tests\\imports_test.ImportsTest.test_handle_import": ["pycg.machinery.imports.ImportManager.get_imports", "pycg.machinery.imports.ImportManager.create_node", "os.path.abspath", "base.TestBase.assertEqual", "mock.patch", "pycg.machinery.imports.ImportManager.set_pkg", "pycg.machinery.imports.ImportManager", "pycg\\tests\\imports_test.ImportsTest.test_handle_import.MockImport.__init__", "pycg.machinery.imports.ImportManager.set_current_mod", "<builtin>.set", "pycg.machinery.imports.ImportManager.handle_import"], "pycg.machinery.imports.ImportManager.handle_import": [], "pycg\\tests\\imports_test.ImportsTest.test_handle_import.MockImport.__init__": [], "pycg\\tests\\pointers_test": [], "pycg\\tests\\pointers_test.PointerTest.test_merge": ["base.TestBase.assertEqual", "pycg.machinery.pointers.Pointer.add", "pycg.machinery.pointers.Pointer.get", "<builtin>.set", "pycg.machinery.pointers.Pointer", "pycg.machinery.pointers.Pointer.merge"], "pycg.machinery.pointers.Pointer": [], "pycg.machinery.pointers.Pointer.add": [], "pycg.machinery.pointers.Pointer.merge": [], "pycg.machinery.pointers.Pointer.get": [], "pycg\\tests\\pointers_test.PointerTest.test_literal_pointer": ["base.TestBase.assertEqual", "pycg.machinery.pointers.LiteralPointer.add", "<builtin>.set", "pycg.machinery.pointers.LiteralPointer", "pycg.machinery.pointers.LiteralPointer.get"], "pycg.machinery.pointers.LiteralPointer.add": [], "pycg.machinery.pointers.LiteralPointer.get": [], "pycg\\tests\\pointers_test.PointerTest.test_name_pointer": ["pycg.machinery.pointers.NamePointer.get_pos_args", "base.TestBase.assertRaises", "pycg.machinery.pointers.NamePointer.add_pos_lit_arg", "pycg.machinery.pointers.NamePointer", "base.TestBase.assertEqual", "pycg.machinery.pointers.NamePointer.get_args", "pycg.machinery.pointers.NamePointer.add_pos_arg", "<builtin>.set"], "pycg.machinery.pointers.NamePointer.get_args": [], "pycg.machinery.pointers.NamePointer.add_pos_arg": [], "pycg.machinery.pointers.NamePointer.get_pos_args": [], "pycg.machinery.pointers.NamePointer.add_pos_lit_arg": [], "pycg\\tests\\pointers_test.PointerTest.test_name_pointer_merge": ["pycg.machinery.pointers.NamePointer.get", "pycg.machinery.pointers.NamePointer", "pycg.machinery.pointers.NamePointer.merge", "base.TestBase.assertEqual", "pycg.machinery.pointers.NamePointer.add_arg", "pycg.machinery.pointers.NamePointer.get_arg", "<builtin>.set", "pycg.machinery.pointers.NamePointer.add"], "pycg.machinery.pointers.NamePointer.add": [], "pycg.machinery.pointers.NamePointer.add_arg": [], "pycg.machinery.pointers.NamePointer.merge": [], "pycg.machinery.pointers.NamePointer.get": [], "pycg.machinery.pointers.NamePointer.get_arg": [], "pycg\\tests\\scopes_test": [], "pycg\\tests\\scopes_test.ScopeManagerTest.test_handle_module": ["base.TestBase.assertEqual", "<builtin>.sorted", "mock.patch.object", "pycg.machinery.scopes.ScopeManager.get_scope", "pycg.machinery.scopes.ScopeManager.get_scope.get_ns", "pycg\\tests\\scopes_test.ScopeManagerTest.test_handle_module.MockTable.__init__", "pycg.machinery.scopes.ScopeManager.handle_module", "pycg.machinery.scopes.ScopeManager"], "pycg\\tests\\scopes_test.ScopeManagerTest.test_handle_module.MockTable.__init__": [], "pycg\\tests\\scopes_test.ScopeManagerTest.test_handle_module.MockTable.get_type": [], "pycg\\tests\\scopes_test.ScopeManagerTest.test_handle_module.MockTable.get_name": [], "pycg\\tests\\scopes_test.ScopeManagerTest.test_handle_module.MockTable.get_children": [], "pycg\\tests\\scopes_test.ScopeManagerTest.test_handle_module.MockTable.get_lineno": [], "mock.patch.object": [], "pycg.machinery.scopes.ScopeManager.handle_module": [], "pycg.machinery.scopes.ScopeManager.get_scope": [], "pycg.machinery.scopes.ScopeManager.get_scope.get_ns": [], "pycg\\tests\\scopes_test.ScopeManagerTest.test_handle_assign": ["pycg.machinery.scopes.ScopeManager.handle_assign", "pycg.machinery.scopes.ScopeItem", "base.TestBase.assertEqual", "pycg.machinery.scopes.ScopeManager", "pycg.machinery.scopes.ScopeManager.get_def"], "pycg.machinery.scopes.ScopeItem": [], "pycg.machinery.scopes.ScopeManager.handle_assign": [], "pycg.machinery.scopes.ScopeManager.get_def": [], "pycg\\tests\\scopes_test.ScopeManagerTest.test_get_def": ["pycg.machinery.scopes.ScopeManager", "base.TestBase.assertEqual", "pycg.machinery.scopes.ScopeItem", "pycg.machinery.scopes.ScopeManager.get_def"], "pycg\\tests\\scopes_test.ScopeManagerTest.test_get_scope": ["pycg.machinery.scopes.ScopeManager.get_scope", "pycg.machinery.scopes.ScopeManager", "pycg.machinery.scopes.ScopeItem", "base.TestBase.assertEqual"], "pycg\\tests\\scopes_test.ScopeItemTest.test_setup": ["base.TestBase.assertRaises", "pycg.machinery.scopes.ScopeItem.get_defs", "pycg.machinery.scopes.ScopeItem", "base.TestBase.assertEqual"], "pycg.machinery.scopes.ScopeItem.get_defs": [], "pycg\\tests\\scopes_test.ScopeItemTest.test_get_ns": ["pycg.machinery.scopes.ScopeItem.get_ns", "pycg.machinery.scopes.ScopeItem", "base.TestBase.assertEqual"], "pycg.machinery.scopes.ScopeItem.get_ns": [], "pycg\\tests\\scopes_test.ScopeItemTest.test_defs": ["base.TestBase.assertTrue", "pycg.machinery.scopes.ScopeItem", "base.TestBase.assertEqual", "pycg.machinery.scopes.ScopeItem.add_def", "pycg.machinery.scopes.ScopeItem.get_def", "pycg.machinery.scopes.ScopeItem.get_defs", "pycg\\tests\\scopes_test.ScopeItemTest.test_defs.MockDef.__init__", "pycg.machinery.scopes.ScopeItem.merge_def", "pycg.machinery.scopes.ScopeItem.get_defs.items"], "pycg\\tests\\scopes_test.ScopeItemTest.test_defs.MockDef.__init__": [], "pycg\\tests\\scopes_test.ScopeItemTest.test_defs.MockDef.get_points_to": [], "pycg\\tests\\scopes_test.ScopeItemTest.test_defs.MockDef.merge_points_to": [], "pycg.machinery.scopes.ScopeItem.add_def": [], "pycg.machinery.scopes.ScopeItem.get_defs.items": [], "pycg.machinery.scopes.ScopeItem.get_def": [], "pycg.machinery.scopes.ScopeItem.merge_def": [], "base.TestBase.assertTrue": [], "pycg\\utils\\common": [], "pycg\\utils\\common.get_lambda_name": [], "pycg\\utils\\common.get_dict_name": [], "pycg\\utils\\common.get_list_name": [], "pycg\\utils\\common.get_int_name": [], "pycg\\utils\\common.join_ns": [], "pycg\\utils\\common.to_mod_name": ["os.path.splitext"], "os.path.splitext": [], "pycg\\utils\\constants": [], "pycg\\__main__": ["pycg\\__main__.main"], "pycg\\__main__.main": ["pycg.formats.AsGraph", "argparse.ArgumentParser.add_argument", "<builtin>.print", "pycg.pycg.CallGraphGenerator", "pycg.formats.AsGraph.generate", "pycg.formats.Simple", "pycg.formats.Fasten", "pycg.formats.Fasten.generate", "pycg.pycg.CallGraphGenerator.output_key_errs", "<builtin>.open", "pycg.formats.Simple.generate", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser", "pycg.pycg.CallGraphGenerator.analyze", "json.dumps"], "argparse.ArgumentParser": [], "argparse.ArgumentParser.add_argument": [], "argparse.ArgumentParser.parse_args": [], "pycg.pycg.CallGraphGenerator": [], "pycg.pycg.CallGraphGenerator.analyze": [], "pycg.formats.Fasten": [], "pycg.formats.Simple": [], "pycg.formats.Simple.generate": [], "pycg.formats.Fasten.generate": [], "pycg.pycg.CallGraphGenerator.output_key_errs": [], "pycg.formats.AsGraph": [], "json.dumps": [], "pycg.formats.AsGraph.generate": [], "setup": ["setup.setup_package"], "setup.get_long_desc": ["<builtin>.open"], "setup.setup_package": ["setuptools.find_packages", "setuptools.setup", "setup.get_long_desc"], "setuptools.find_packages": [], "setuptools.setup": []}